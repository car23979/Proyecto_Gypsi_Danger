
Proyecto Gypsy Danger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  000012aa  0000133e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000066  00800142  00800142  00001380  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016db  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000baf  00000000  00000000  00002c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cdd  00000000  00000000  00003806  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  000044e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c7  00000000  00000000  00004804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009c2  00000000  00000000  00004ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000588d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 22 04 	jmp	0x844	; 0x844 <__vector_16>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__vector_21>
      58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	63 64       	ori	r22, 0x43	; 67
      6a:	69 6e       	ori	r22, 0xE9	; 233
      6c:	6f 70       	andi	r22, 0x0F	; 15
      6e:	73 75       	andi	r23, 0x53	; 83
      70:	78 58       	subi	r23, 0x88	; 136
      72:	5b 00       	.word	0x005b	; ????

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf ef       	ldi	r28, 0xFF	; 255
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	11 e0       	ldi	r17, 0x01	; 1
      82:	a0 e0       	ldi	r26, 0x00	; 0
      84:	b1 e0       	ldi	r27, 0x01	; 1
      86:	ea ea       	ldi	r30, 0xAA	; 170
      88:	f2 e1       	ldi	r31, 0x12	; 18
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a2 34       	cpi	r26, 0x42	; 66
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	21 e0       	ldi	r18, 0x01	; 1
      98:	a2 e4       	ldi	r26, 0x42	; 66
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	a8 3a       	cpi	r26, 0xA8	; 168
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 c3 02 	call	0x586	; 0x586 <main>
      aa:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <configurar_ADC>:

#include <avr/io.h>
#include "adc_config.h"

void configurar_ADC(void){
	ADMUX = (1 << REFS0) | (1 << ADLAR); // AVcc como ref, justificación a la izquierda
      b2:	80 e6       	ldi	r24, 0x60	; 96
      b4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1); // Habilita ADC, interrupción, prescaler 16
      b8:	ea e7       	ldi	r30, 0x7A	; 122
      ba:	f0 e0       	ldi	r31, 0x00	; 0
      bc:	8e e8       	ldi	r24, 0x8E	; 142
      be:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Inicia primera conversión
      c0:	80 81       	ld	r24, Z
      c2:	80 64       	ori	r24, 0x40	; 64
      c4:	80 83       	st	Z, r24
      c6:	08 95       	ret

000000c8 <EEPROM_write>:
 */ 

#include "EEPROM.h"

void EEPROM_write(uint8_t dato, uint16_t direccion) {
	while (EECR & (1 << EEPE));  // Espera si EEPROM está ocupada
      c8:	f9 99       	sbic	0x1f, 1	; 31
      ca:	fe cf       	rjmp	.-4      	; 0xc8 <EEPROM_write>
	EEAR = direccion;
      cc:	72 bd       	out	0x22, r23	; 34
      ce:	61 bd       	out	0x21, r22	; 33
	EEDR = dato;
      d0:	80 bd       	out	0x20, r24	; 32
	EECR |= (1 << EEMPE);
      d2:	8f b3       	in	r24, 0x1f	; 31
      d4:	84 60       	ori	r24, 0x04	; 4
      d6:	8f bb       	out	0x1f, r24	; 31
	EECR |= (1 << EEPE);
      d8:	8f b3       	in	r24, 0x1f	; 31
      da:	82 60       	ori	r24, 0x02	; 2
      dc:	8f bb       	out	0x1f, r24	; 31
      de:	08 95       	ret

000000e0 <EEPROM_read>:
}

uint8_t EEPROM_read(uint16_t direccion) {
	while (EECR & (1 << EEPE));
      e0:	f9 99       	sbic	0x1f, 1	; 31
      e2:	fe cf       	rjmp	.-4      	; 0xe0 <EEPROM_read>
	EEAR = direccion;
      e4:	92 bd       	out	0x22, r25	; 34
      e6:	81 bd       	out	0x21, r24	; 33
	EECR |= (1 << EERE);
      e8:	8f b3       	in	r24, 0x1f	; 31
      ea:	81 60       	ori	r24, 0x01	; 1
      ec:	8f bb       	out	0x1f, r24	; 31
	return EEDR;
      ee:	80 b5       	in	r24, 0x20	; 32
}
      f0:	08 95       	ret

000000f2 <EEPROM_save_servo_positions>:

// Guarda una posición completa (5 servos) en la EEPROM en el índice especificado (0 a 4)
void EEPROM_save_servo_positions(uint8_t *servos, uint8_t index) {
      f2:	ef 92       	push	r14
      f4:	ff 92       	push	r15
      f6:	0f 93       	push	r16
      f8:	1f 93       	push	r17
      fa:	cf 93       	push	r28
	if (index >= 5) return;  // Índice fuera de rango
      fc:	65 30       	cpi	r22, 0x05	; 5
      fe:	c0 f4       	brcc	.+48     	; 0x130 <EEPROM_save_servo_positions+0x3e>
     100:	7c 01       	movw	r14, r24
	uint16_t base_addr = index * 5;
     102:	70 e0       	ldi	r23, 0x00	; 0
     104:	8b 01       	movw	r16, r22
     106:	00 0f       	add	r16, r16
     108:	11 1f       	adc	r17, r17
     10a:	00 0f       	add	r16, r16
     10c:	11 1f       	adc	r17, r17
     10e:	06 0f       	add	r16, r22
     110:	17 1f       	adc	r17, r23
	for (uint8_t i = 0; i < 5; i++) {
     112:	c0 e0       	ldi	r28, 0x00	; 0
     114:	0b c0       	rjmp	.+22     	; 0x12c <EEPROM_save_servo_positions+0x3a>
		EEPROM_write(servos[i], base_addr + i);
     116:	6c 2f       	mov	r22, r28
     118:	70 e0       	ldi	r23, 0x00	; 0
     11a:	f7 01       	movw	r30, r14
     11c:	e6 0f       	add	r30, r22
     11e:	f7 1f       	adc	r31, r23
     120:	60 0f       	add	r22, r16
     122:	71 1f       	adc	r23, r17
     124:	80 81       	ld	r24, Z
     126:	0e 94 64 00 	call	0xc8	; 0xc8 <EEPROM_write>

// Guarda una posición completa (5 servos) en la EEPROM en el índice especificado (0 a 4)
void EEPROM_save_servo_positions(uint8_t *servos, uint8_t index) {
	if (index >= 5) return;  // Índice fuera de rango
	uint16_t base_addr = index * 5;
	for (uint8_t i = 0; i < 5; i++) {
     12a:	cf 5f       	subi	r28, 0xFF	; 255
     12c:	c5 30       	cpi	r28, 0x05	; 5
     12e:	98 f3       	brcs	.-26     	; 0x116 <EEPROM_save_servo_positions+0x24>
		EEPROM_write(servos[i], base_addr + i);
	}
}
     130:	cf 91       	pop	r28
     132:	1f 91       	pop	r17
     134:	0f 91       	pop	r16
     136:	ff 90       	pop	r15
     138:	ef 90       	pop	r14
     13a:	08 95       	ret

0000013c <EEPROM_load_servo_positions>:

// Carga una posición completa (5 servos) desde EEPROM al índice especificado (0 a 4)
void EEPROM_load_servo_positions(uint8_t *servos, uint8_t index) {
     13c:	cf 92       	push	r12
     13e:	df 92       	push	r13
     140:	ef 92       	push	r14
     142:	ff 92       	push	r15
     144:	0f 93       	push	r16
     146:	1f 93       	push	r17
     148:	cf 93       	push	r28
	if (index >= 5) return;
     14a:	65 30       	cpi	r22, 0x05	; 5
     14c:	c8 f4       	brcc	.+50     	; 0x180 <EEPROM_load_servo_positions+0x44>
     14e:	7c 01       	movw	r14, r24
	uint16_t base_addr = index * 5;
     150:	70 e0       	ldi	r23, 0x00	; 0
     152:	8b 01       	movw	r16, r22
     154:	00 0f       	add	r16, r16
     156:	11 1f       	adc	r17, r17
     158:	00 0f       	add	r16, r16
     15a:	11 1f       	adc	r17, r17
     15c:	06 0f       	add	r16, r22
     15e:	17 1f       	adc	r17, r23
	for (uint8_t i = 0; i < 5; i++) {
     160:	c0 e0       	ldi	r28, 0x00	; 0
     162:	0c c0       	rjmp	.+24     	; 0x17c <EEPROM_load_servo_positions+0x40>
		servos[i] = EEPROM_read(base_addr + i);
     164:	8c 2f       	mov	r24, r28
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	67 01       	movw	r12, r14
     16a:	c8 0e       	add	r12, r24
     16c:	d9 1e       	adc	r13, r25
     16e:	80 0f       	add	r24, r16
     170:	91 1f       	adc	r25, r17
     172:	0e 94 70 00 	call	0xe0	; 0xe0 <EEPROM_read>
     176:	f6 01       	movw	r30, r12
     178:	80 83       	st	Z, r24

// Carga una posición completa (5 servos) desde EEPROM al índice especificado (0 a 4)
void EEPROM_load_servo_positions(uint8_t *servos, uint8_t index) {
	if (index >= 5) return;
	uint16_t base_addr = index * 5;
	for (uint8_t i = 0; i < 5; i++) {
     17a:	cf 5f       	subi	r28, 0xFF	; 255
     17c:	c5 30       	cpi	r28, 0x05	; 5
     17e:	90 f3       	brcs	.-28     	; 0x164 <EEPROM_load_servo_positions+0x28>
		servos[i] = EEPROM_read(base_addr + i);
	}
}
     180:	cf 91       	pop	r28
     182:	1f 91       	pop	r17
     184:	0f 91       	pop	r16
     186:	ff 90       	pop	r15
     188:	ef 90       	pop	r14
     18a:	df 90       	pop	r13
     18c:	cf 90       	pop	r12
     18e:	08 95       	ret

00000190 <mover_servos>:


//---------Funciones Principales --------

// Mueve todos los servos
void mover_servos(void){
     190:	cf 92       	push	r12
     192:	df 92       	push	r13
     194:	ef 92       	push	r14
     196:	ff 92       	push	r15
	// PWM por hardware: PB1 y PB2 (Timer1)
	actualizar_PB1(500 + (pos_s1 * 2000UL / 255));  // Cabeza
     198:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <pos_s1>
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	a0 ed       	ldi	r26, 0xD0	; 208
     1a0:	b7 e0       	ldi	r27, 0x07	; 7
     1a2:	0e 94 42 05 	call	0xa84	; 0xa84 <__umulhisi3>
     1a6:	c1 2c       	mov	r12, r1
     1a8:	d1 2c       	mov	r13, r1
     1aa:	76 01       	movw	r14, r12
     1ac:	ca 94       	dec	r12
     1ae:	a7 01       	movw	r20, r14
     1b0:	96 01       	movw	r18, r12
     1b2:	0e 94 20 05 	call	0xa40	; 0xa40 <__udivmodsi4>
     1b6:	c9 01       	movw	r24, r18
     1b8:	8c 50       	subi	r24, 0x0C	; 12
     1ba:	9e 4f       	sbci	r25, 0xFE	; 254
     1bc:	0e 94 09 04 	call	0x812	; 0x812 <actualizar_PB1>
	actualizar_PB2(500 + (pos_s2 * 2000UL / 255));  // Hombro 1
     1c0:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <pos_s2>
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	a0 ed       	ldi	r26, 0xD0	; 208
     1c8:	b7 e0       	ldi	r27, 0x07	; 7
     1ca:	0e 94 42 05 	call	0xa84	; 0xa84 <__umulhisi3>
     1ce:	a7 01       	movw	r20, r14
     1d0:	96 01       	movw	r18, r12
     1d2:	0e 94 20 05 	call	0xa40	; 0xa40 <__udivmodsi4>
     1d6:	c9 01       	movw	r24, r18
     1d8:	8c 50       	subi	r24, 0x0C	; 12
     1da:	9e 4f       	sbci	r25, 0xFE	; 254
     1dc:	0e 94 10 04 	call	0x820	; 0x820 <actualizar_PB2>

	// PWM por software: PB3, PB4, PB5 (Timer0)
	actualizar_PB3(500 + (pos_s3 * 2000UL / 255));  // Brazo 1
     1e0:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <pos_s3>
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	a0 ed       	ldi	r26, 0xD0	; 208
     1e8:	b7 e0       	ldi	r27, 0x07	; 7
     1ea:	0e 94 42 05 	call	0xa84	; 0xa84 <__umulhisi3>
     1ee:	a7 01       	movw	r20, r14
     1f0:	96 01       	movw	r18, r12
     1f2:	0e 94 20 05 	call	0xa40	; 0xa40 <__udivmodsi4>
     1f6:	c9 01       	movw	r24, r18
     1f8:	8c 50       	subi	r24, 0x0C	; 12
     1fa:	9e 4f       	sbci	r25, 0xFE	; 254
     1fc:	0e 94 a1 04 	call	0x942	; 0x942 <actualizar_PB3>
	actualizar_PB4(500 + (pos_s4 * 2000UL / 255));  // Brazo 2
     200:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <pos_s4>
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	a0 ed       	ldi	r26, 0xD0	; 208
     208:	b7 e0       	ldi	r27, 0x07	; 7
     20a:	0e 94 42 05 	call	0xa84	; 0xa84 <__umulhisi3>
     20e:	a7 01       	movw	r20, r14
     210:	96 01       	movw	r18, r12
     212:	0e 94 20 05 	call	0xa40	; 0xa40 <__udivmodsi4>
     216:	c9 01       	movw	r24, r18
     218:	8c 50       	subi	r24, 0x0C	; 12
     21a:	9e 4f       	sbci	r25, 0xFE	; 254
     21c:	0e 94 a6 04 	call	0x94c	; 0x94c <actualizar_PB4>
	actualizar_PB5(500 + (pos_s5 * 2000UL / 255));  // Hombro 2
     220:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <pos_s5>
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	a0 ed       	ldi	r26, 0xD0	; 208
     228:	b7 e0       	ldi	r27, 0x07	; 7
     22a:	0e 94 42 05 	call	0xa84	; 0xa84 <__umulhisi3>
     22e:	a7 01       	movw	r20, r14
     230:	96 01       	movw	r18, r12
     232:	0e 94 20 05 	call	0xa40	; 0xa40 <__udivmodsi4>
     236:	c9 01       	movw	r24, r18
     238:	8c 50       	subi	r24, 0x0C	; 12
     23a:	9e 4f       	sbci	r25, 0xFE	; 254
     23c:	0e 94 ab 04 	call	0x956	; 0x956 <actualizar_PB5>
}
     240:	ff 90       	pop	r15
     242:	ef 90       	pop	r14
     244:	df 90       	pop	r13
     246:	cf 90       	pop	r12
     248:	08 95       	ret

0000024a <configurar_botones_y_leds>:

// Función para configurar botones y LEDs
void configurar_botones_y_leds(void){
	DDRD &= ~((1 << BTN_MODO) | (1 << BTN_GUARDAR) | (1 << BTN_EJECUTAR)); // Entradas
     24a:	8a b1       	in	r24, 0x0a	; 10
     24c:	83 7e       	andi	r24, 0xE3	; 227
     24e:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << BTN_MODO) | (1 << BTN_GUARDAR) | (1 << BTN_EJECUTAR);   // Pull-ups
     250:	8b b1       	in	r24, 0x0b	; 11
     252:	8c 61       	ori	r24, 0x1C	; 28
     254:	8b b9       	out	0x0b, r24	; 11

	DDRD |= (1 << LED_R) | (1 << LED_G) | (1 << LED_B); // LEDs como salida
     256:	8a b1       	in	r24, 0x0a	; 10
     258:	80 6e       	ori	r24, 0xE0	; 224
     25a:	8a b9       	out	0x0a, r24	; 10
     25c:	08 95       	ret

0000025e <set_led_rgb>:
}

// Control de LEDs según modo
void set_led_rgb(uint8_t r, uint8_t g, uint8_t b) {
	if (r) PORTD |= (1 << LED_R); else PORTD &= ~(1 << LED_R);
     25e:	88 23       	and	r24, r24
     260:	21 f0       	breq	.+8      	; 0x26a <set_led_rgb+0xc>
     262:	8b b1       	in	r24, 0x0b	; 11
     264:	80 62       	ori	r24, 0x20	; 32
     266:	8b b9       	out	0x0b, r24	; 11
     268:	03 c0       	rjmp	.+6      	; 0x270 <set_led_rgb+0x12>
     26a:	8b b1       	in	r24, 0x0b	; 11
     26c:	8f 7d       	andi	r24, 0xDF	; 223
     26e:	8b b9       	out	0x0b, r24	; 11
	if (g) PORTD |= (1 << LED_G); else PORTD &= ~(1 << LED_G);
     270:	66 23       	and	r22, r22
     272:	21 f0       	breq	.+8      	; 0x27c <set_led_rgb+0x1e>
     274:	8b b1       	in	r24, 0x0b	; 11
     276:	80 64       	ori	r24, 0x40	; 64
     278:	8b b9       	out	0x0b, r24	; 11
     27a:	03 c0       	rjmp	.+6      	; 0x282 <set_led_rgb+0x24>
     27c:	8b b1       	in	r24, 0x0b	; 11
     27e:	8f 7b       	andi	r24, 0xBF	; 191
     280:	8b b9       	out	0x0b, r24	; 11
	if (b) PORTD |= (1 << LED_B); else PORTD &= ~(1 << LED_B);
     282:	44 23       	and	r20, r20
     284:	21 f0       	breq	.+8      	; 0x28e <set_led_rgb+0x30>
     286:	8b b1       	in	r24, 0x0b	; 11
     288:	80 68       	ori	r24, 0x80	; 128
     28a:	8b b9       	out	0x0b, r24	; 11
     28c:	08 95       	ret
     28e:	8b b1       	in	r24, 0x0b	; 11
     290:	8f 77       	andi	r24, 0x7F	; 127
     292:	8b b9       	out	0x0b, r24	; 11
     294:	08 95       	ret

00000296 <actualizar_LED_modo>:
}

void actualizar_LED_modo(void) {
	switch(modo_actual){
     296:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <modo_actual>
     29a:	81 30       	cpi	r24, 0x01	; 1
     29c:	51 f0       	breq	.+20     	; 0x2b2 <actualizar_LED_modo+0x1c>
     29e:	18 f0       	brcs	.+6      	; 0x2a6 <actualizar_LED_modo+0x10>
     2a0:	82 30       	cpi	r24, 0x02	; 2
     2a2:	69 f0       	breq	.+26     	; 0x2be <actualizar_LED_modo+0x28>
     2a4:	08 95       	ret
		case MODO_MANUAL: set_led_rgb(0, 1, 0); break;  // Verde
     2a6:	40 e0       	ldi	r20, 0x00	; 0
     2a8:	61 e0       	ldi	r22, 0x01	; 1
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	0e 94 2f 01 	call	0x25e	; 0x25e <set_led_rgb>
     2b0:	08 95       	ret
		case MODO_EEPROM: set_led_rgb(0, 0, 1); break;  // Azul
     2b2:	41 e0       	ldi	r20, 0x01	; 1
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	0e 94 2f 01 	call	0x25e	; 0x25e <set_led_rgb>
     2bc:	08 95       	ret
		case MODO_UART:   set_led_rgb(1, 0, 0); break;  // Rojo
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	0e 94 2f 01 	call	0x25e	; 0x25e <set_led_rgb>
     2c8:	08 95       	ret

000002ca <indicar_guardado_exitoso>:
	}
}

void indicar_guardado_exitoso(uint8_t index) {
	// Mostrar color distinto para cada posición (sin usar RGB puro)
	switch (index) {
     2ca:	82 30       	cpi	r24, 0x02	; 2
     2cc:	b9 f0       	breq	.+46     	; 0x2fc <indicar_guardado_exitoso+0x32>
     2ce:	28 f4       	brcc	.+10     	; 0x2da <indicar_guardado_exitoso+0x10>
     2d0:	88 23       	and	r24, r24
     2d2:	41 f0       	breq	.+16     	; 0x2e4 <indicar_guardado_exitoso+0x1a>
     2d4:	81 30       	cpi	r24, 0x01	; 1
     2d6:	61 f0       	breq	.+24     	; 0x2f0 <indicar_guardado_exitoso+0x26>
     2d8:	22 c0       	rjmp	.+68     	; 0x31e <indicar_guardado_exitoso+0x54>
     2da:	83 30       	cpi	r24, 0x03	; 3
     2dc:	a9 f0       	breq	.+42     	; 0x308 <indicar_guardado_exitoso+0x3e>
     2de:	84 30       	cpi	r24, 0x04	; 4
     2e0:	c9 f0       	breq	.+50     	; 0x314 <indicar_guardado_exitoso+0x4a>
     2e2:	1d c0       	rjmp	.+58     	; 0x31e <indicar_guardado_exitoso+0x54>
		case 0: set_led_rgb(1, 1, 0); break; // Amarillo
     2e4:	40 e0       	ldi	r20, 0x00	; 0
     2e6:	61 e0       	ldi	r22, 0x01	; 1
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	0e 94 2f 01 	call	0x25e	; 0x25e <set_led_rgb>
     2ee:	17 c0       	rjmp	.+46     	; 0x31e <indicar_guardado_exitoso+0x54>
		case 1: set_led_rgb(0, 1, 1); break; // Cian
     2f0:	41 e0       	ldi	r20, 0x01	; 1
     2f2:	61 e0       	ldi	r22, 0x01	; 1
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	0e 94 2f 01 	call	0x25e	; 0x25e <set_led_rgb>
     2fa:	11 c0       	rjmp	.+34     	; 0x31e <indicar_guardado_exitoso+0x54>
		case 2: set_led_rgb(1, 0, 1); break; // Magenta
     2fc:	41 e0       	ldi	r20, 0x01	; 1
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	0e 94 2f 01 	call	0x25e	; 0x25e <set_led_rgb>
     306:	0b c0       	rjmp	.+22     	; 0x31e <indicar_guardado_exitoso+0x54>
		case 3: set_led_rgb(1, 1, 1); break; // Blanco
     308:	41 e0       	ldi	r20, 0x01	; 1
     30a:	61 e0       	ldi	r22, 0x01	; 1
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	0e 94 2f 01 	call	0x25e	; 0x25e <set_led_rgb>
     312:	05 c0       	rjmp	.+10     	; 0x31e <indicar_guardado_exitoso+0x54>
		case 4: set_led_rgb(1, 0.5, 0); break; // Naranja (aproximado como rojo+verde)
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	0e 94 2f 01 	call	0x25e	; 0x25e <set_led_rgb>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     31e:	2f ef       	ldi	r18, 0xFF	; 255
     320:	85 ea       	ldi	r24, 0xA5	; 165
     322:	9e e0       	ldi	r25, 0x0E	; 14
     324:	21 50       	subi	r18, 0x01	; 1
     326:	80 40       	sbci	r24, 0x00	; 0
     328:	90 40       	sbci	r25, 0x00	; 0
     32a:	e1 f7       	brne	.-8      	; 0x324 <indicar_guardado_exitoso+0x5a>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <indicar_guardado_exitoso+0x64>
     32e:	00 00       	nop
	}
	_delay_ms(300);
	actualizar_LED_modo(); // Volver al color del modo actual
     330:	0e 94 4b 01 	call	0x296	; 0x296 <actualizar_LED_modo>
     334:	08 95       	ret

00000336 <actualizar_adc_por_modo>:
}

// --- Controla ADC según modo ---
void actualizar_adc_por_modo(void) {
	if (modo_actual == MODO_UART) {
     336:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <modo_actual>
     33a:	82 30       	cpi	r24, 0x02	; 2
     33c:	49 f4       	brne	.+18     	; 0x350 <actualizar_adc_por_modo+0x1a>
		ADCSRA &= ~(1 << ADIE); // Deshabilita interrupción ADC
     33e:	ea e7       	ldi	r30, 0x7A	; 122
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	80 81       	ld	r24, Z
     344:	87 7f       	andi	r24, 0xF7	; 247
     346:	80 83       	st	Z, r24
		ADCSRA &= ~(1 << ADEN); // Apaga ADC (opcional)
     348:	80 81       	ld	r24, Z
     34a:	8f 77       	andi	r24, 0x7F	; 127
     34c:	80 83       	st	Z, r24
     34e:	08 95       	ret
		} else {
		ADCSRA |= (1 << ADEN);  // Enciende ADC
     350:	ea e7       	ldi	r30, 0x7A	; 122
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	80 81       	ld	r24, Z
     356:	80 68       	ori	r24, 0x80	; 128
     358:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADIE);  // Habilita interrupción ADC
     35a:	80 81       	ld	r24, Z
     35c:	88 60       	ori	r24, 0x08	; 8
     35e:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADSC);  // Inicia conversión
     360:	80 81       	ld	r24, Z
     362:	80 64       	ori	r24, 0x40	; 64
     364:	80 83       	st	Z, r24
     366:	08 95       	ret

00000368 <UART_ProcessCommand>:
	}
}

// Función para procesar comandos UART
void UART_ProcessCommand(const char *cmd) {
     368:	ff 92       	push	r15
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	00 d0       	rcall	.+0      	; 0x374 <UART_ProcessCommand+0xc>
     374:	00 d0       	rcall	.+0      	; 0x376 <UART_ProcessCommand+0xe>
     376:	1f 92       	push	r1
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	08 2f       	mov	r16, r24
     37e:	19 2f       	mov	r17, r25
	set_led_rgb(0, 0, 1); // Azul
     380:	41 e0       	ldi	r20, 0x01	; 1
     382:	60 e0       	ldi	r22, 0x00	; 0
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	0e 94 2f 01 	call	0x25e	; 0x25e <set_led_rgb>
     38a:	2f ef       	ldi	r18, 0xFF	; 255
     38c:	30 e7       	ldi	r19, 0x70	; 112
     38e:	82 e0       	ldi	r24, 0x02	; 2
     390:	21 50       	subi	r18, 0x01	; 1
     392:	30 40       	sbci	r19, 0x00	; 0
     394:	80 40       	sbci	r24, 0x00	; 0
     396:	e1 f7       	brne	.-8      	; 0x390 <UART_ProcessCommand+0x28>
     398:	00 c0       	rjmp	.+0      	; 0x39a <UART_ProcessCommand+0x32>
     39a:	00 00       	nop
	_delay_ms(50);
	actualizar_LED_modo();
     39c:	0e 94 4b 01 	call	0x296	; 0x296 <actualizar_LED_modo>

	if (strncmp(cmd, "MOVE", 4) == 0) {
     3a0:	44 e0       	ldi	r20, 0x04	; 4
     3a2:	50 e0       	ldi	r21, 0x00	; 0
     3a4:	66 e0       	ldi	r22, 0x06	; 6
     3a6:	71 e0       	ldi	r23, 0x01	; 1
     3a8:	80 2f       	mov	r24, r16
     3aa:	91 2f       	mov	r25, r17
     3ac:	0e 94 9c 05 	call	0xb38	; 0xb38 <strncmp>
     3b0:	89 2b       	or	r24, r25
     3b2:	c1 f5       	brne	.+112    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
		uint8_t vals[5] = {0};
     3b4:	fe 01       	movw	r30, r28
     3b6:	31 96       	adiw	r30, 0x01	; 1
     3b8:	85 e0       	ldi	r24, 0x05	; 5
     3ba:	df 01       	movw	r26, r30
     3bc:	1d 92       	st	X+, r1
     3be:	8a 95       	dec	r24
     3c0:	e9 f7       	brne	.-6      	; 0x3bc <UART_ProcessCommand+0x54>
		int n = sscanf(cmd, "MOVE %hhu %hhu %hhu %hhu %hhu",
     3c2:	ce 01       	movw	r24, r28
     3c4:	05 96       	adiw	r24, 0x05	; 5
     3c6:	9f 93       	push	r25
     3c8:	8f 93       	push	r24
     3ca:	01 97       	sbiw	r24, 0x01	; 1
     3cc:	9f 93       	push	r25
     3ce:	8f 93       	push	r24
     3d0:	01 97       	sbiw	r24, 0x01	; 1
     3d2:	9f 93       	push	r25
     3d4:	8f 93       	push	r24
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	9f 93       	push	r25
     3da:	8f 93       	push	r24
     3dc:	ff 93       	push	r31
     3de:	ef 93       	push	r30
     3e0:	8b e0       	ldi	r24, 0x0B	; 11
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	9f 93       	push	r25
     3e6:	8f 93       	push	r24
     3e8:	1f 93       	push	r17
     3ea:	0f 93       	push	r16
     3ec:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <sscanf>
		&vals[0], &vals[1], &vals[2], &vals[3], &vals[4]);
		if (n == 5) {
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	de bf       	out	0x3e, r29	; 62
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	cd bf       	out	0x3d, r28	; 61
     3fa:	05 97       	sbiw	r24, 0x05	; 5
     3fc:	09 f0       	breq	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
     3fe:	5e c0       	rjmp	.+188    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
			pos_s1 = vals[0];
     400:	89 81       	ldd	r24, Y+1	; 0x01
     402:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <pos_s1>
			pos_s2 = vals[1];
     406:	8a 81       	ldd	r24, Y+2	; 0x02
     408:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <pos_s2>
			pos_s3 = vals[2];
     40c:	8b 81       	ldd	r24, Y+3	; 0x03
     40e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <pos_s3>
			pos_s4 = vals[3];
     412:	8c 81       	ldd	r24, Y+4	; 0x04
     414:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <pos_s4>
			pos_s5 = vals[4];
     418:	8d 81       	ldd	r24, Y+5	; 0x05
     41a:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <pos_s5>
			mover_servos();
     41e:	0e 94 c8 00 	call	0x190	; 0x190 <mover_servos>
     422:	4c c0       	rjmp	.+152    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
		}
	}
	else if (strstr(cmd, ":") != NULL) {
     424:	6a e3       	ldi	r22, 0x3A	; 58
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	80 2f       	mov	r24, r16
     42a:	91 2f       	mov	r25, r17
     42c:	0e 94 88 05 	call	0xb10	; 0xb10 <strchr>
     430:	89 2b       	or	r24, r25
     432:	09 f4       	brne	.+2      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     434:	43 c0       	rjmp	.+134    	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
		char *servo = strtok((char*)cmd, ":");
     436:	69 e2       	ldi	r22, 0x29	; 41
     438:	71 e0       	ldi	r23, 0x01	; 1
     43a:	80 2f       	mov	r24, r16
     43c:	91 2f       	mov	r25, r17
     43e:	0e 94 83 05 	call	0xb06	; 0xb06 <strtok>
     442:	8c 01       	movw	r16, r24
		uint8_t valor = atoi(strtok(NULL, ":"));
     444:	69 e2       	ldi	r22, 0x29	; 41
     446:	71 e0       	ldi	r23, 0x01	; 1
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 83 05 	call	0xb06	; 0xb06 <strtok>
     450:	0e 94 65 05 	call	0xaca	; 0xaca <atoi>
     454:	f8 2e       	mov	r15, r24
		
		if (strcmp(servo, "C") == 0) pos_s1 = valor;
     456:	6b e2       	ldi	r22, 0x2B	; 43
     458:	71 e0       	ldi	r23, 0x01	; 1
     45a:	c8 01       	movw	r24, r16
     45c:	0e 94 93 05 	call	0xb26	; 0xb26 <strcmp>
     460:	89 2b       	or	r24, r25
     462:	19 f4       	brne	.+6      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     464:	f0 92 4a 01 	sts	0x014A, r15	; 0x80014a <pos_s1>
     468:	27 c0       	rjmp	.+78     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
		else if (strcmp(servo, "H1") == 0) pos_s2 = valor;
     46a:	6d e2       	ldi	r22, 0x2D	; 45
     46c:	71 e0       	ldi	r23, 0x01	; 1
     46e:	c8 01       	movw	r24, r16
     470:	0e 94 93 05 	call	0xb26	; 0xb26 <strcmp>
     474:	89 2b       	or	r24, r25
     476:	19 f4       	brne	.+6      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
     478:	f0 92 49 01 	sts	0x0149, r15	; 0x800149 <pos_s2>
     47c:	1d c0       	rjmp	.+58     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
		else if (strcmp(servo, "B1") == 0) pos_s3 = valor;
     47e:	60 e3       	ldi	r22, 0x30	; 48
     480:	71 e0       	ldi	r23, 0x01	; 1
     482:	c8 01       	movw	r24, r16
     484:	0e 94 93 05 	call	0xb26	; 0xb26 <strcmp>
     488:	89 2b       	or	r24, r25
     48a:	19 f4       	brne	.+6      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     48c:	f0 92 48 01 	sts	0x0148, r15	; 0x800148 <pos_s3>
     490:	13 c0       	rjmp	.+38     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
		else if (strcmp(servo, "B2") == 0) pos_s4 = valor;
     492:	63 e3       	ldi	r22, 0x33	; 51
     494:	71 e0       	ldi	r23, 0x01	; 1
     496:	c8 01       	movw	r24, r16
     498:	0e 94 93 05 	call	0xb26	; 0xb26 <strcmp>
     49c:	89 2b       	or	r24, r25
     49e:	19 f4       	brne	.+6      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
     4a0:	f0 92 47 01 	sts	0x0147, r15	; 0x800147 <pos_s4>
     4a4:	09 c0       	rjmp	.+18     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
		else if (strcmp(servo, "H2") == 0) pos_s5 = valor;
     4a6:	66 e3       	ldi	r22, 0x36	; 54
     4a8:	71 e0       	ldi	r23, 0x01	; 1
     4aa:	c8 01       	movw	r24, r16
     4ac:	0e 94 93 05 	call	0xb26	; 0xb26 <strcmp>
     4b0:	89 2b       	or	r24, r25
     4b2:	11 f4       	brne	.+4      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
     4b4:	f0 92 46 01 	sts	0x0146, r15	; 0x800146 <pos_s5>

		mover_servos();
     4b8:	0e 94 c8 00 	call	0x190	; 0x190 <mover_servos>
	}
}
     4bc:	0f 90       	pop	r0
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	1f 91       	pop	r17
     4cc:	0f 91       	pop	r16
     4ce:	ff 90       	pop	r15
     4d0:	08 95       	ret

000004d2 <__vector_21>:


ISR(ADC_vect){
     4d2:	1f 92       	push	r1
     4d4:	0f 92       	push	r0
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	0f 92       	push	r0
     4da:	11 24       	eor	r1, r1
     4dc:	5f 93       	push	r21
     4de:	6f 93       	push	r22
     4e0:	7f 93       	push	r23
     4e2:	8f 93       	push	r24
     4e4:	9f 93       	push	r25
     4e6:	af 93       	push	r26
     4e8:	bf 93       	push	r27
     4ea:	ef 93       	push	r30
     4ec:	ff 93       	push	r31
	switch (axis_value){
     4ee:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <axis_value>
     4f2:	82 30       	cpi	r24, 0x02	; 2
     4f4:	a9 f0       	breq	.+42     	; 0x520 <__vector_21+0x4e>
     4f6:	28 f4       	brcc	.+10     	; 0x502 <__vector_21+0x30>
     4f8:	88 23       	and	r24, r24
     4fa:	41 f0       	breq	.+16     	; 0x50c <__vector_21+0x3a>
     4fc:	81 30       	cpi	r24, 0x01	; 1
     4fe:	59 f0       	breq	.+22     	; 0x516 <__vector_21+0x44>
     500:	1d c0       	rjmp	.+58     	; 0x53c <__vector_21+0x6a>
     502:	83 30       	cpi	r24, 0x03	; 3
     504:	91 f0       	breq	.+36     	; 0x52a <__vector_21+0x58>
     506:	84 30       	cpi	r24, 0x04	; 4
     508:	a9 f0       	breq	.+42     	; 0x534 <__vector_21+0x62>
     50a:	18 c0       	rjmp	.+48     	; 0x53c <__vector_21+0x6a>
		case 0: pos_s1 = ADCH; break;
     50c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     510:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <pos_s1>
     514:	13 c0       	rjmp	.+38     	; 0x53c <__vector_21+0x6a>
		case 1: pos_s2 = ADCH; break;
     516:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     51a:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <pos_s2>
     51e:	0e c0       	rjmp	.+28     	; 0x53c <__vector_21+0x6a>
		case 2: pos_s3 = ADCH; break;
     520:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     524:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <pos_s3>
     528:	09 c0       	rjmp	.+18     	; 0x53c <__vector_21+0x6a>
		case 3: pos_s4 = ADCH; break;
     52a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     52e:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <pos_s4>
     532:	04 c0       	rjmp	.+8      	; 0x53c <__vector_21+0x6a>
		case 4: pos_s5 = ADCH; break;
     534:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     538:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <pos_s5>
	}
	axis_value = (axis_value + 1) % 5;
     53c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <axis_value>
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	65 e0       	ldi	r22, 0x05	; 5
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	0e 94 0c 05 	call	0xa18	; 0xa18 <__divmodhi4>
     54c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <axis_value>
	ADMUX = (ADMUX & 0xF0) | axis_value;
     550:	ec e7       	ldi	r30, 0x7C	; 124
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	80 81       	ld	r24, Z
     556:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <axis_value>
     55a:	80 7f       	andi	r24, 0xF0	; 240
     55c:	89 2b       	or	r24, r25
     55e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  // Inicia nueva conversión
     560:	ea e7       	ldi	r30, 0x7A	; 122
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	80 81       	ld	r24, Z
     566:	80 64       	ori	r24, 0x40	; 64
     568:	80 83       	st	Z, r24
}
     56a:	ff 91       	pop	r31
     56c:	ef 91       	pop	r30
     56e:	bf 91       	pop	r27
     570:	af 91       	pop	r26
     572:	9f 91       	pop	r25
     574:	8f 91       	pop	r24
     576:	7f 91       	pop	r23
     578:	6f 91       	pop	r22
     57a:	5f 91       	pop	r21
     57c:	0f 90       	pop	r0
     57e:	0f be       	out	0x3f, r0	; 63
     580:	0f 90       	pop	r0
     582:	1f 90       	pop	r1
     584:	18 95       	reti

00000586 <main>:

int main(void){
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
     58e:	e2 97       	sbiw	r28, 0x32	; 50
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	f8 94       	cli
     594:	de bf       	out	0x3e, r29	; 62
     596:	0f be       	out	0x3f, r0	; 63
     598:	cd bf       	out	0x3d, r28	; 61
	configurar_ADC();
     59a:	0e 94 59 00 	call	0xb2	; 0xb2 <configurar_ADC>
	configurar_pwm_hardware();
     59e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <configurar_pwm_hardware>
	configurar_pwm_software();
     5a2:	0e 94 17 04 	call	0x82e	; 0x82e <configurar_pwm_software>
	configurar_botones_y_leds();
     5a6:	0e 94 25 01 	call	0x24a	; 0x24a <configurar_botones_y_leds>
	actualizar_LED_modo();
     5aa:	0e 94 4b 01 	call	0x296	; 0x296 <actualizar_LED_modo>
	UART_init(103);		// 9600 bauds para 16Mhz
     5ae:	87 e6       	ldi	r24, 0x67	; 103
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 b0 04 	call	0x960	; 0x960 <UART_init>
	sei();// hABILITAR INTERRUPCIÓN
     5b6:	78 94       	sei
	
	actualizar_adc_por_modo(); // Inicializar ADC acorde al modo inicial
     5b8:	0e 94 9b 01 	call	0x336	; 0x336 <actualizar_adc_por_modo>

	while (1){
		if (modo_actual == MODO_MANUAL || modo_actual == MODO_EEPROM){
     5bc:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <modo_actual>
     5c0:	88 23       	and	r24, r24
     5c2:	21 f0       	breq	.+8      	; 0x5cc <main+0x46>
     5c4:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <modo_actual>
     5c8:	81 30       	cpi	r24, 0x01	; 1
     5ca:	11 f4       	brne	.+4      	; 0x5d0 <main+0x4a>
			mover_servos(); // Solo se mueven con joystick
     5cc:	0e 94 c8 00 	call	0x190	; 0x190 <mover_servos>
		}
		
		if (modo_actual == MODO_UART) {
     5d0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <modo_actual>
     5d4:	82 30       	cpi	r24, 0x02	; 2
     5d6:	59 f4       	brne	.+22     	; 0x5ee <main+0x68>
			char buffer[50];
			if (UART_read_line(buffer, sizeof(buffer))) {
     5d8:	62 e3       	ldi	r22, 0x32	; 50
     5da:	ce 01       	movw	r24, r28
     5dc:	01 96       	adiw	r24, 0x01	; 1
     5de:	0e 94 cf 04 	call	0x99e	; 0x99e <UART_read_line>
     5e2:	88 23       	and	r24, r24
     5e4:	21 f0       	breq	.+8      	; 0x5ee <main+0x68>
				UART_ProcessCommand(buffer);
     5e6:	ce 01       	movw	r24, r28
     5e8:	01 96       	adiw	r24, 0x01	; 1
     5ea:	0e 94 b4 01 	call	0x368	; 0x368 <UART_ProcessCommand>
			}
		}


		// --- Lógica de botones ---
		if (!(PIND & (1 << BTN_MODO))){
     5ee:	4a 99       	sbic	0x09, 2	; 9
     5f0:	17 c0       	rjmp	.+46     	; 0x620 <main+0x9a>
     5f2:	2f ef       	ldi	r18, 0xFF	; 255
     5f4:	85 ea       	ldi	r24, 0xA5	; 165
     5f6:	9e e0       	ldi	r25, 0x0E	; 14
     5f8:	21 50       	subi	r18, 0x01	; 1
     5fa:	80 40       	sbci	r24, 0x00	; 0
     5fc:	90 40       	sbci	r25, 0x00	; 0
     5fe:	e1 f7       	brne	.-8      	; 0x5f8 <main+0x72>
     600:	00 c0       	rjmp	.+0      	; 0x602 <main+0x7c>
     602:	00 00       	nop
			_delay_ms(300);
			modo_actual = (modo_actual + 1) % 3;
     604:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <modo_actual>
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	01 96       	adiw	r24, 0x01	; 1
     60c:	63 e0       	ldi	r22, 0x03	; 3
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	0e 94 0c 05 	call	0xa18	; 0xa18 <__divmodhi4>
     614:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <modo_actual>
			actualizar_LED_modo();
     618:	0e 94 4b 01 	call	0x296	; 0x296 <actualizar_LED_modo>
			actualizar_adc_por_modo();
     61c:	0e 94 9b 01 	call	0x336	; 0x336 <actualizar_adc_por_modo>
		}
		
		// Guardar posición actual en EEPROM
		if (!(PIND & (1 << BTN_GUARDAR)) && modo_actual == MODO_EEPROM){
     620:	4b 99       	sbic	0x09, 3	; 9
     622:	a0 c0       	rjmp	.+320    	; 0x764 <main+0x1de>
     624:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <modo_actual>
     628:	81 30       	cpi	r24, 0x01	; 1
     62a:	09 f0       	breq	.+2      	; 0x62e <main+0xa8>
     62c:	9b c0       	rjmp	.+310    	; 0x764 <main+0x1de>
     62e:	ef ef       	ldi	r30, 0xFF	; 255
     630:	f5 ea       	ldi	r31, 0xA5	; 165
     632:	2e e0       	ldi	r18, 0x0E	; 14
     634:	e1 50       	subi	r30, 0x01	; 1
     636:	f0 40       	sbci	r31, 0x00	; 0
     638:	20 40       	sbci	r18, 0x00	; 0
     63a:	e1 f7       	brne	.-8      	; 0x634 <main+0xae>
     63c:	00 c0       	rjmp	.+0      	; 0x63e <main+0xb8>
     63e:	00 00       	nop
			_delay_ms(300);
			if (total_guardadas >= 5){
     640:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <total_guardadas>
     644:	85 30       	cpi	r24, 0x05	; 5
     646:	28 f1       	brcs	.+74     	; 0x692 <main+0x10c>
				total_guardadas = 0;
     648:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <total_guardadas>

				// Parpadeo blanco para indicar reinicio
				for (uint8_t i = 0; i < 3; i++) {
     64c:	10 e0       	ldi	r17, 0x00	; 0
     64e:	1d c0       	rjmp	.+58     	; 0x68a <main+0x104>
					set_led_rgb(1, 1, 1);
     650:	41 e0       	ldi	r20, 0x01	; 1
     652:	61 e0       	ldi	r22, 0x01	; 1
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	0e 94 2f 01 	call	0x25e	; 0x25e <set_led_rgb>
     65a:	8f ef       	ldi	r24, 0xFF	; 255
     65c:	93 ec       	ldi	r25, 0xC3	; 195
     65e:	e9 e0       	ldi	r30, 0x09	; 9
     660:	81 50       	subi	r24, 0x01	; 1
     662:	90 40       	sbci	r25, 0x00	; 0
     664:	e0 40       	sbci	r30, 0x00	; 0
     666:	e1 f7       	brne	.-8      	; 0x660 <main+0xda>
     668:	00 c0       	rjmp	.+0      	; 0x66a <main+0xe4>
     66a:	00 00       	nop
					_delay_ms(200);
					set_led_rgb(0, 0, 0);
     66c:	40 e0       	ldi	r20, 0x00	; 0
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	0e 94 2f 01 	call	0x25e	; 0x25e <set_led_rgb>
     676:	ff ef       	ldi	r31, 0xFF	; 255
     678:	23 ec       	ldi	r18, 0xC3	; 195
     67a:	89 e0       	ldi	r24, 0x09	; 9
     67c:	f1 50       	subi	r31, 0x01	; 1
     67e:	20 40       	sbci	r18, 0x00	; 0
     680:	80 40       	sbci	r24, 0x00	; 0
     682:	e1 f7       	brne	.-8      	; 0x67c <main+0xf6>
     684:	00 c0       	rjmp	.+0      	; 0x686 <main+0x100>
     686:	00 00       	nop
			_delay_ms(300);
			if (total_guardadas >= 5){
				total_guardadas = 0;

				// Parpadeo blanco para indicar reinicio
				for (uint8_t i = 0; i < 3; i++) {
     688:	1f 5f       	subi	r17, 0xFF	; 255
     68a:	13 30       	cpi	r17, 0x03	; 3
     68c:	08 f3       	brcs	.-62     	; 0x650 <main+0xca>
					set_led_rgb(1, 1, 1);
					_delay_ms(200);
					set_led_rgb(0, 0, 0);
					_delay_ms(200);
				}
				actualizar_LED_modo();
     68e:	0e 94 4b 01 	call	0x296	; 0x296 <actualizar_LED_modo>
			}
			
			
			servo_positions[total_guardadas][0] = pos_s1;
     692:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <total_guardadas>
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	20 91 4a 01 	lds	r18, 0x014A	; 0x80014a <pos_s1>
     69c:	fc 01       	movw	r30, r24
     69e:	ee 0f       	add	r30, r30
     6a0:	ff 1f       	adc	r31, r31
     6a2:	ee 0f       	add	r30, r30
     6a4:	ff 1f       	adc	r31, r31
     6a6:	8e 0f       	add	r24, r30
     6a8:	9f 1f       	adc	r25, r31
     6aa:	fc 01       	movw	r30, r24
     6ac:	e1 57       	subi	r30, 0x71	; 113
     6ae:	fe 4f       	sbci	r31, 0xFE	; 254
     6b0:	20 83       	st	Z, r18
			servo_positions[total_guardadas][1] = pos_s2;
     6b2:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <total_guardadas>
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <pos_s2>
     6bc:	fc 01       	movw	r30, r24
     6be:	ee 0f       	add	r30, r30
     6c0:	ff 1f       	adc	r31, r31
     6c2:	ee 0f       	add	r30, r30
     6c4:	ff 1f       	adc	r31, r31
     6c6:	8e 0f       	add	r24, r30
     6c8:	9f 1f       	adc	r25, r31
     6ca:	fc 01       	movw	r30, r24
     6cc:	e1 57       	subi	r30, 0x71	; 113
     6ce:	fe 4f       	sbci	r31, 0xFE	; 254
     6d0:	21 83       	std	Z+1, r18	; 0x01
			servo_positions[total_guardadas][2] = pos_s3;
     6d2:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <total_guardadas>
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <pos_s3>
     6dc:	fc 01       	movw	r30, r24
     6de:	ee 0f       	add	r30, r30
     6e0:	ff 1f       	adc	r31, r31
     6e2:	ee 0f       	add	r30, r30
     6e4:	ff 1f       	adc	r31, r31
     6e6:	8e 0f       	add	r24, r30
     6e8:	9f 1f       	adc	r25, r31
     6ea:	fc 01       	movw	r30, r24
     6ec:	e1 57       	subi	r30, 0x71	; 113
     6ee:	fe 4f       	sbci	r31, 0xFE	; 254
     6f0:	22 83       	std	Z+2, r18	; 0x02
			servo_positions[total_guardadas][3] = pos_s4;
     6f2:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <total_guardadas>
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <pos_s4>
     6fc:	fc 01       	movw	r30, r24
     6fe:	ee 0f       	add	r30, r30
     700:	ff 1f       	adc	r31, r31
     702:	ee 0f       	add	r30, r30
     704:	ff 1f       	adc	r31, r31
     706:	8e 0f       	add	r24, r30
     708:	9f 1f       	adc	r25, r31
     70a:	fc 01       	movw	r30, r24
     70c:	e1 57       	subi	r30, 0x71	; 113
     70e:	fe 4f       	sbci	r31, 0xFE	; 254
     710:	23 83       	std	Z+3, r18	; 0x03
			servo_positions[total_guardadas][4] = pos_s5;
     712:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <total_guardadas>
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <pos_s5>
     71c:	fc 01       	movw	r30, r24
     71e:	ee 0f       	add	r30, r30
     720:	ff 1f       	adc	r31, r31
     722:	ee 0f       	add	r30, r30
     724:	ff 1f       	adc	r31, r31
     726:	8e 0f       	add	r24, r30
     728:	9f 1f       	adc	r25, r31
     72a:	fc 01       	movw	r30, r24
     72c:	e1 57       	subi	r30, 0x71	; 113
     72e:	fe 4f       	sbci	r31, 0xFE	; 254
     730:	24 83       	std	Z+4, r18	; 0x04
			
			// Guarda EEPROM correctamente
			EEPROM_save_servo_positions((uint8_t*)servo_positions[total_guardadas], total_guardadas);
     732:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <total_guardadas>
     736:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <total_guardadas>
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	9c 01       	movw	r18, r24
     73e:	22 0f       	add	r18, r18
     740:	33 1f       	adc	r19, r19
     742:	22 0f       	add	r18, r18
     744:	33 1f       	adc	r19, r19
     746:	82 0f       	add	r24, r18
     748:	93 1f       	adc	r25, r19
     74a:	81 57       	subi	r24, 0x71	; 113
     74c:	9e 4f       	sbci	r25, 0xFE	; 254
     74e:	0e 94 79 00 	call	0xf2	; 0xf2 <EEPROM_save_servo_positions>
			
			// Parpadeo de LED para indicar exito
			indicar_guardado_exitoso(total_guardadas);  // Feedback visual
     752:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <total_guardadas>
     756:	0e 94 65 01 	call	0x2ca	; 0x2ca <indicar_guardado_exitoso>
			
			// Incremento
			total_guardadas++;
     75a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <total_guardadas>
     75e:	8f 5f       	subi	r24, 0xFF	; 255
     760:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <total_guardadas>

		}
		

		// Ejecutar todas las posiciones desde EEPROM
		if (!(PIND & (1 << BTN_EJECUTAR)) && modo_actual == MODO_EEPROM){
     764:	4c 99       	sbic	0x09, 4	; 9
     766:	3e c0       	rjmp	.+124    	; 0x7e4 <main+0x25e>
     768:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <modo_actual>
     76c:	81 30       	cpi	r24, 0x01	; 1
     76e:	d1 f5       	brne	.+116    	; 0x7e4 <main+0x25e>
     770:	9f ef       	ldi	r25, 0xFF	; 255
     772:	e5 ea       	ldi	r30, 0xA5	; 165
     774:	fe e0       	ldi	r31, 0x0E	; 14
     776:	91 50       	subi	r25, 0x01	; 1
     778:	e0 40       	sbci	r30, 0x00	; 0
     77a:	f0 40       	sbci	r31, 0x00	; 0
     77c:	e1 f7       	brne	.-8      	; 0x776 <main+0x1f0>
     77e:	00 c0       	rjmp	.+0      	; 0x780 <main+0x1fa>
     780:	00 00       	nop
			_delay_ms(300);
			for (uint8_t i = 0; i < total_guardadas; i++){
     782:	f1 2c       	mov	r15, r1
     784:	2b c0       	rjmp	.+86     	; 0x7dc <main+0x256>
				EEPROM_load_servo_positions((uint8_t*)servo_positions[i], i);
     786:	0f 2d       	mov	r16, r15
     788:	10 e0       	ldi	r17, 0x00	; 0
     78a:	c8 01       	movw	r24, r16
     78c:	88 0f       	add	r24, r24
     78e:	99 1f       	adc	r25, r25
     790:	88 0f       	add	r24, r24
     792:	99 1f       	adc	r25, r25
     794:	08 0f       	add	r16, r24
     796:	19 1f       	adc	r17, r25
     798:	01 57       	subi	r16, 0x71	; 113
     79a:	1e 4f       	sbci	r17, 0xFE	; 254
     79c:	6f 2d       	mov	r22, r15
     79e:	c8 01       	movw	r24, r16
     7a0:	0e 94 9e 00 	call	0x13c	; 0x13c <EEPROM_load_servo_positions>

				pos_s1 = servo_positions[i][0];
     7a4:	f8 01       	movw	r30, r16
     7a6:	80 81       	ld	r24, Z
     7a8:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <pos_s1>
				pos_s2 = servo_positions[i][1];
     7ac:	81 81       	ldd	r24, Z+1	; 0x01
     7ae:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <pos_s2>
				pos_s3 = servo_positions[i][2];
     7b2:	82 81       	ldd	r24, Z+2	; 0x02
     7b4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <pos_s3>
				pos_s4 = servo_positions[i][3];
     7b8:	83 81       	ldd	r24, Z+3	; 0x03
     7ba:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <pos_s4>
				pos_s5 = servo_positions[i][4];
     7be:	84 81       	ldd	r24, Z+4	; 0x04
     7c0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <pos_s5>
				mover_servos();
     7c4:	0e 94 c8 00 	call	0x190	; 0x190 <mover_servos>
     7c8:	ff ef       	ldi	r31, 0xFF	; 255
     7ca:	23 ed       	ldi	r18, 0xD3	; 211
     7cc:	80 e3       	ldi	r24, 0x30	; 48
     7ce:	f1 50       	subi	r31, 0x01	; 1
     7d0:	20 40       	sbci	r18, 0x00	; 0
     7d2:	80 40       	sbci	r24, 0x00	; 0
     7d4:	e1 f7       	brne	.-8      	; 0x7ce <main+0x248>
     7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <main+0x252>
     7d8:	00 00       	nop
		

		// Ejecutar todas las posiciones desde EEPROM
		if (!(PIND & (1 << BTN_EJECUTAR)) && modo_actual == MODO_EEPROM){
			_delay_ms(300);
			for (uint8_t i = 0; i < total_guardadas; i++){
     7da:	f3 94       	inc	r15
     7dc:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <total_guardadas>
     7e0:	f8 16       	cp	r15, r24
     7e2:	88 f2       	brcs	.-94     	; 0x786 <main+0x200>
     7e4:	ef e3       	ldi	r30, 0x3F	; 63
     7e6:	fc e9       	ldi	r31, 0x9C	; 156
     7e8:	31 97       	sbiw	r30, 0x01	; 1
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <main+0x262>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <main+0x268>
     7ee:	00 00       	nop
     7f0:	e5 ce       	rjmp	.-566    	; 0x5bc <main+0x36>

000007f2 <configurar_pwm_hardware>:

#include <avr/io.h>
#include "pwm_hard.h"

void configurar_pwm_hardware(void){
	DDRB |= (1 << PB1) | (1 << PB2); // Salidas OC1A y OC1B
     7f2:	84 b1       	in	r24, 0x04	; 4
     7f4:	86 60       	ori	r24, 0x06	; 6
     7f6:	84 b9       	out	0x04, r24	; 4
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11); // PWM rápido, modo 14
     7f8:	82 ea       	ldi	r24, 0xA2	; 162
     7fa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // Prescaler 8
     7fe:	8a e1       	ldi	r24, 0x1A	; 26
     800:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1 = 39999; // TOP para 20ms a 16MHz
     804:	8f e3       	ldi	r24, 0x3F	; 63
     806:	9c e9       	ldi	r25, 0x9C	; 156
     808:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     80c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     810:	08 95       	ret

00000812 <actualizar_PB1>:
}

void actualizar_PB1(uint16_t us){
	OCR1A = (us * 2); // Conversión µs a ticks (16MHz / 8)
     812:	88 0f       	add	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     81a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     81e:	08 95       	ret

00000820 <actualizar_PB2>:
}

void actualizar_PB2(uint16_t us){
	OCR1B = (us * 2);
     820:	88 0f       	add	r24, r24
     822:	99 1f       	adc	r25, r25
     824:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     828:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     82c:	08 95       	ret

0000082e <configurar_pwm_software>:
volatile uint16_t pulsoPB4 = 1500;
volatile uint16_t pulsoPB5 = 1500;
volatile uint16_t timer_ticks = 0;

void configurar_pwm_software(void){
	DDRB |= (1 << PB3) | (1 << PB4) | (1 << PB5);
     82e:	84 b1       	in	r24, 0x04	; 4
     830:	88 63       	ori	r24, 0x38	; 56
     832:	84 b9       	out	0x04, r24	; 4
	TCCR0A = 0;
     834:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS01); // Prescaler 8
     836:	82 e0       	ldi	r24, 0x02	; 2
     838:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << TOIE0); // Interrupción por overflow
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0 = 0;
     840:	16 bc       	out	0x26, r1	; 38
     842:	08 95       	ret

00000844 <__vector_16>:
}

ISR(TIMER0_OVF_vect){
     844:	1f 92       	push	r1
     846:	0f 92       	push	r0
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	0f 92       	push	r0
     84c:	11 24       	eor	r1, r1
     84e:	2f 93       	push	r18
     850:	3f 93       	push	r19
     852:	6f 93       	push	r22
     854:	7f 93       	push	r23
     856:	8f 93       	push	r24
     858:	9f 93       	push	r25
     85a:	af 93       	push	r26
     85c:	bf 93       	push	r27
	timer_ticks++;
     85e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <timer_ticks>
     862:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <timer_ticks+0x1>
     866:	01 96       	adiw	r24, 0x01	; 1
     868:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <timer_ticks+0x1>
     86c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <timer_ticks>
	if (timer_ticks == 1){
     870:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <timer_ticks>
     874:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <timer_ticks+0x1>
     878:	01 97       	sbiw	r24, 0x01	; 1
     87a:	19 f4       	brne	.+6      	; 0x882 <__vector_16+0x3e>
		PORTB |= (1 << PB3) | (1 << PB4) | (1 << PB5);
     87c:	85 b1       	in	r24, 0x05	; 5
     87e:	88 63       	ori	r24, 0x38	; 56
     880:	85 b9       	out	0x05, r24	; 5
	}
	if (timer_ticks == (pulsoPB3 / 100)){
     882:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <pulsoPB3>
     886:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <pulsoPB3+0x1>
     88a:	36 95       	lsr	r19
     88c:	27 95       	ror	r18
     88e:	36 95       	lsr	r19
     890:	27 95       	ror	r18
     892:	ab e7       	ldi	r26, 0x7B	; 123
     894:	b4 e1       	ldi	r27, 0x14	; 20
     896:	0e 94 42 05 	call	0xa84	; 0xa84 <__umulhisi3>
     89a:	96 95       	lsr	r25
     89c:	87 95       	ror	r24
     89e:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <timer_ticks>
     8a2:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <timer_ticks+0x1>
     8a6:	82 17       	cp	r24, r18
     8a8:	93 07       	cpc	r25, r19
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__vector_16+0x6e>
		PORTB &= ~(1 << PB3);
     8ac:	85 b1       	in	r24, 0x05	; 5
     8ae:	87 7f       	andi	r24, 0xF7	; 247
     8b0:	85 b9       	out	0x05, r24	; 5
	}
	if (timer_ticks == (pulsoPB4 / 100)){
     8b2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <pulsoPB4>
     8b6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <pulsoPB4+0x1>
     8ba:	36 95       	lsr	r19
     8bc:	27 95       	ror	r18
     8be:	36 95       	lsr	r19
     8c0:	27 95       	ror	r18
     8c2:	ab e7       	ldi	r26, 0x7B	; 123
     8c4:	b4 e1       	ldi	r27, 0x14	; 20
     8c6:	0e 94 42 05 	call	0xa84	; 0xa84 <__umulhisi3>
     8ca:	96 95       	lsr	r25
     8cc:	87 95       	ror	r24
     8ce:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <timer_ticks>
     8d2:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <timer_ticks+0x1>
     8d6:	82 17       	cp	r24, r18
     8d8:	93 07       	cpc	r25, r19
     8da:	19 f4       	brne	.+6      	; 0x8e2 <__vector_16+0x9e>
		PORTB &= ~(1 << PB4);
     8dc:	85 b1       	in	r24, 0x05	; 5
     8de:	8f 7e       	andi	r24, 0xEF	; 239
     8e0:	85 b9       	out	0x05, r24	; 5
	}
	if (timer_ticks == (pulsoPB5 / 100)){
     8e2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     8e6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     8ea:	36 95       	lsr	r19
     8ec:	27 95       	ror	r18
     8ee:	36 95       	lsr	r19
     8f0:	27 95       	ror	r18
     8f2:	ab e7       	ldi	r26, 0x7B	; 123
     8f4:	b4 e1       	ldi	r27, 0x14	; 20
     8f6:	0e 94 42 05 	call	0xa84	; 0xa84 <__umulhisi3>
     8fa:	96 95       	lsr	r25
     8fc:	87 95       	ror	r24
     8fe:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <timer_ticks>
     902:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <timer_ticks+0x1>
     906:	82 17       	cp	r24, r18
     908:	93 07       	cpc	r25, r19
     90a:	19 f4       	brne	.+6      	; 0x912 <__stack+0x13>
		PORTB &= ~(1 << PB5);
     90c:	85 b1       	in	r24, 0x05	; 5
     90e:	8f 7d       	andi	r24, 0xDF	; 223
     910:	85 b9       	out	0x05, r24	; 5
	}
	if (timer_ticks >= 200){ // 20 ms
     912:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <timer_ticks>
     916:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <timer_ticks+0x1>
     91a:	88 3c       	cpi	r24, 0xC8	; 200
     91c:	91 05       	cpc	r25, r1
     91e:	20 f0       	brcs	.+8      	; 0x928 <__stack+0x29>
		timer_ticks = 0;
     920:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <timer_ticks+0x1>
     924:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <timer_ticks>
	}
}
     928:	bf 91       	pop	r27
     92a:	af 91       	pop	r26
     92c:	9f 91       	pop	r25
     92e:	8f 91       	pop	r24
     930:	7f 91       	pop	r23
     932:	6f 91       	pop	r22
     934:	3f 91       	pop	r19
     936:	2f 91       	pop	r18
     938:	0f 90       	pop	r0
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	0f 90       	pop	r0
     93e:	1f 90       	pop	r1
     940:	18 95       	reti

00000942 <actualizar_PB3>:

void actualizar_PB3(uint16_t us){
	pulsoPB3 = us;
     942:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <pulsoPB3+0x1>
     946:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pulsoPB3>
     94a:	08 95       	ret

0000094c <actualizar_PB4>:
}
void actualizar_PB4(uint16_t us){
	pulsoPB4 = us;
     94c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <pulsoPB4+0x1>
     950:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pulsoPB4>
     954:	08 95       	ret

00000956 <actualizar_PB5>:
}
void actualizar_PB5(uint16_t us){
	pulsoPB5 = us;
     956:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     95a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     95e:	08 95       	ret

00000960 <UART_init>:

static char uart_buffer[64];
static uint8_t uart_index = 0;

void UART_init(uint16_t ubrr) {
	UBRR0H = (ubrr >> 8);
     960:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = ubrr;
     964:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     968:	88 e1       	ldi	r24, 0x18	; 24
     96a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     96e:	86 e0       	ldi	r24, 0x06	; 6
     970:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     974:	08 95       	ret

00000976 <UART_send_char>:
}

void UART_send_char(char data) {
	while (!(UCSR0A & (1 << UDRE0)));
     976:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     97a:	95 ff       	sbrs	r25, 5
     97c:	fc cf       	rjmp	.-8      	; 0x976 <UART_send_char>
	UDR0 = data;
     97e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     982:	08 95       	ret

00000984 <UART_send_string>:
}

void UART_send_string(const char *str) {
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	ec 01       	movw	r28, r24
	while (*str) {
     98a:	03 c0       	rjmp	.+6      	; 0x992 <UART_send_string+0xe>
		UART_send_char(*str++);
     98c:	21 96       	adiw	r28, 0x01	; 1
     98e:	0e 94 bb 04 	call	0x976	; 0x976 <UART_send_char>
	while (!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
}

void UART_send_string(const char *str) {
	while (*str) {
     992:	88 81       	ld	r24, Y
     994:	81 11       	cpse	r24, r1
     996:	fa cf       	rjmp	.-12     	; 0x98c <UART_send_string+0x8>
		UART_send_char(*str++);
	}
}
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <UART_read_line>:

uint8_t UART_read_line(char *buffer, uint8_t max_len) {
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	ac 01       	movw	r20, r24
	while (UCSR0A & (1 << RXC0)) {
     9a4:	31 c0       	rjmp	.+98     	; 0xa08 <UART_read_line+0x6a>
		char c = UDR0;
     9a6:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		if (c == '\r' || c == '\n') {
     9aa:	9d 30       	cpi	r25, 0x0D	; 13
     9ac:	11 f0       	breq	.+4      	; 0x9b2 <UART_read_line+0x14>
     9ae:	9a 30       	cpi	r25, 0x0A	; 10
     9b0:	f9 f4       	brne	.+62     	; 0x9f0 <UART_read_line+0x52>
			if (uart_index > 0) {
     9b2:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <uart_index>
     9b6:	ee 23       	and	r30, r30
     9b8:	39 f1       	breq	.+78     	; 0xa08 <UART_read_line+0x6a>
     9ba:	ea 01       	movw	r28, r20
				uart_buffer[uart_index] = '\0';
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	e1 5b       	subi	r30, 0xB1	; 177
     9c0:	fe 4f       	sbci	r31, 0xFE	; 254
     9c2:	10 82       	st	Z, r1
				strncpy(buffer, uart_buffer, max_len);
     9c4:	46 2f       	mov	r20, r22
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	6f e4       	ldi	r22, 0x4F	; 79
     9ca:	71 e0       	ldi	r23, 0x01	; 1
     9cc:	ce 01       	movw	r24, r28
     9ce:	0e 94 aa 05 	call	0xb54	; 0xb54 <strncpy>
				uart_index = 0;
     9d2:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <uart_index>
				UART_send_string("ECO: ");
     9d6:	89 e3       	ldi	r24, 0x39	; 57
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	0e 94 c2 04 	call	0x984	; 0x984 <UART_send_string>
				UART_send_string(buffer);
     9de:	ce 01       	movw	r24, r28
     9e0:	0e 94 c2 04 	call	0x984	; 0x984 <UART_send_string>
				UART_send_string("\r\n");
     9e4:	8f e3       	ldi	r24, 0x3F	; 63
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	0e 94 c2 04 	call	0x984	; 0x984 <UART_send_string>
				return 1;
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	11 c0       	rjmp	.+34     	; 0xa12 <UART_read_line+0x74>
			}
			} else {
			if (uart_index < sizeof(uart_buffer) - 1) {
     9f0:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <uart_index>
     9f4:	ef 33       	cpi	r30, 0x3F	; 63
     9f6:	40 f4       	brcc	.+16     	; 0xa08 <UART_read_line+0x6a>
				uart_buffer[uart_index++] = c;
     9f8:	21 e0       	ldi	r18, 0x01	; 1
     9fa:	2e 0f       	add	r18, r30
     9fc:	20 93 4e 01 	sts	0x014E, r18	; 0x80014e <uart_index>
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	e1 5b       	subi	r30, 0xB1	; 177
     a04:	fe 4f       	sbci	r31, 0xFE	; 254
     a06:	90 83       	st	Z, r25
		UART_send_char(*str++);
	}
}

uint8_t UART_read_line(char *buffer, uint8_t max_len) {
	while (UCSR0A & (1 << RXC0)) {
     a08:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     a0c:	99 23       	and	r25, r25
     a0e:	5c f2       	brlt	.-106    	; 0x9a6 <UART_read_line+0x8>
			if (uart_index < sizeof(uart_buffer) - 1) {
				uart_buffer[uart_index++] = c;
			}
		}
	}
	return 0;
     a10:	80 e0       	ldi	r24, 0x00	; 0
}
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	08 95       	ret

00000a18 <__divmodhi4>:
     a18:	97 fb       	bst	r25, 7
     a1a:	07 2e       	mov	r0, r23
     a1c:	16 f4       	brtc	.+4      	; 0xa22 <__divmodhi4+0xa>
     a1e:	00 94       	com	r0
     a20:	07 d0       	rcall	.+14     	; 0xa30 <__divmodhi4_neg1>
     a22:	77 fd       	sbrc	r23, 7
     a24:	09 d0       	rcall	.+18     	; 0xa38 <__divmodhi4_neg2>
     a26:	0e 94 51 05 	call	0xaa2	; 0xaa2 <__udivmodhi4>
     a2a:	07 fc       	sbrc	r0, 7
     a2c:	05 d0       	rcall	.+10     	; 0xa38 <__divmodhi4_neg2>
     a2e:	3e f4       	brtc	.+14     	; 0xa3e <__divmodhi4_exit>

00000a30 <__divmodhi4_neg1>:
     a30:	90 95       	com	r25
     a32:	81 95       	neg	r24
     a34:	9f 4f       	sbci	r25, 0xFF	; 255
     a36:	08 95       	ret

00000a38 <__divmodhi4_neg2>:
     a38:	70 95       	com	r23
     a3a:	61 95       	neg	r22
     a3c:	7f 4f       	sbci	r23, 0xFF	; 255

00000a3e <__divmodhi4_exit>:
     a3e:	08 95       	ret

00000a40 <__udivmodsi4>:
     a40:	a1 e2       	ldi	r26, 0x21	; 33
     a42:	1a 2e       	mov	r1, r26
     a44:	aa 1b       	sub	r26, r26
     a46:	bb 1b       	sub	r27, r27
     a48:	fd 01       	movw	r30, r26
     a4a:	0d c0       	rjmp	.+26     	; 0xa66 <__udivmodsi4_ep>

00000a4c <__udivmodsi4_loop>:
     a4c:	aa 1f       	adc	r26, r26
     a4e:	bb 1f       	adc	r27, r27
     a50:	ee 1f       	adc	r30, r30
     a52:	ff 1f       	adc	r31, r31
     a54:	a2 17       	cp	r26, r18
     a56:	b3 07       	cpc	r27, r19
     a58:	e4 07       	cpc	r30, r20
     a5a:	f5 07       	cpc	r31, r21
     a5c:	20 f0       	brcs	.+8      	; 0xa66 <__udivmodsi4_ep>
     a5e:	a2 1b       	sub	r26, r18
     a60:	b3 0b       	sbc	r27, r19
     a62:	e4 0b       	sbc	r30, r20
     a64:	f5 0b       	sbc	r31, r21

00000a66 <__udivmodsi4_ep>:
     a66:	66 1f       	adc	r22, r22
     a68:	77 1f       	adc	r23, r23
     a6a:	88 1f       	adc	r24, r24
     a6c:	99 1f       	adc	r25, r25
     a6e:	1a 94       	dec	r1
     a70:	69 f7       	brne	.-38     	; 0xa4c <__udivmodsi4_loop>
     a72:	60 95       	com	r22
     a74:	70 95       	com	r23
     a76:	80 95       	com	r24
     a78:	90 95       	com	r25
     a7a:	9b 01       	movw	r18, r22
     a7c:	ac 01       	movw	r20, r24
     a7e:	bd 01       	movw	r22, r26
     a80:	cf 01       	movw	r24, r30
     a82:	08 95       	ret

00000a84 <__umulhisi3>:
     a84:	a2 9f       	mul	r26, r18
     a86:	b0 01       	movw	r22, r0
     a88:	b3 9f       	mul	r27, r19
     a8a:	c0 01       	movw	r24, r0
     a8c:	a3 9f       	mul	r26, r19
     a8e:	70 0d       	add	r23, r0
     a90:	81 1d       	adc	r24, r1
     a92:	11 24       	eor	r1, r1
     a94:	91 1d       	adc	r25, r1
     a96:	b2 9f       	mul	r27, r18
     a98:	70 0d       	add	r23, r0
     a9a:	81 1d       	adc	r24, r1
     a9c:	11 24       	eor	r1, r1
     a9e:	91 1d       	adc	r25, r1
     aa0:	08 95       	ret

00000aa2 <__udivmodhi4>:
     aa2:	aa 1b       	sub	r26, r26
     aa4:	bb 1b       	sub	r27, r27
     aa6:	51 e1       	ldi	r21, 0x11	; 17
     aa8:	07 c0       	rjmp	.+14     	; 0xab8 <__udivmodhi4_ep>

00000aaa <__udivmodhi4_loop>:
     aaa:	aa 1f       	adc	r26, r26
     aac:	bb 1f       	adc	r27, r27
     aae:	a6 17       	cp	r26, r22
     ab0:	b7 07       	cpc	r27, r23
     ab2:	10 f0       	brcs	.+4      	; 0xab8 <__udivmodhi4_ep>
     ab4:	a6 1b       	sub	r26, r22
     ab6:	b7 0b       	sbc	r27, r23

00000ab8 <__udivmodhi4_ep>:
     ab8:	88 1f       	adc	r24, r24
     aba:	99 1f       	adc	r25, r25
     abc:	5a 95       	dec	r21
     abe:	a9 f7       	brne	.-22     	; 0xaaa <__udivmodhi4_loop>
     ac0:	80 95       	com	r24
     ac2:	90 95       	com	r25
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	08 95       	ret

00000aca <atoi>:
     aca:	fc 01       	movw	r30, r24
     acc:	88 27       	eor	r24, r24
     ace:	99 27       	eor	r25, r25
     ad0:	e8 94       	clt
     ad2:	21 91       	ld	r18, Z+
     ad4:	20 32       	cpi	r18, 0x20	; 32
     ad6:	e9 f3       	breq	.-6      	; 0xad2 <atoi+0x8>
     ad8:	29 30       	cpi	r18, 0x09	; 9
     ada:	10 f0       	brcs	.+4      	; 0xae0 <atoi+0x16>
     adc:	2e 30       	cpi	r18, 0x0E	; 14
     ade:	c8 f3       	brcs	.-14     	; 0xad2 <atoi+0x8>
     ae0:	2b 32       	cpi	r18, 0x2B	; 43
     ae2:	41 f0       	breq	.+16     	; 0xaf4 <atoi+0x2a>
     ae4:	2d 32       	cpi	r18, 0x2D	; 45
     ae6:	39 f4       	brne	.+14     	; 0xaf6 <atoi+0x2c>
     ae8:	68 94       	set
     aea:	04 c0       	rjmp	.+8      	; 0xaf4 <atoi+0x2a>
     aec:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <__mulhi_const_10>
     af0:	82 0f       	add	r24, r18
     af2:	91 1d       	adc	r25, r1
     af4:	21 91       	ld	r18, Z+
     af6:	20 53       	subi	r18, 0x30	; 48
     af8:	2a 30       	cpi	r18, 0x0A	; 10
     afa:	c0 f3       	brcs	.-16     	; 0xaec <atoi+0x22>
     afc:	1e f4       	brtc	.+6      	; 0xb04 <atoi+0x3a>
     afe:	90 95       	com	r25
     b00:	81 95       	neg	r24
     b02:	9f 4f       	sbci	r25, 0xFF	; 255
     b04:	08 95       	ret

00000b06 <strtok>:
     b06:	42 e4       	ldi	r20, 0x42	; 66
     b08:	51 e0       	ldi	r21, 0x01	; 1
     b0a:	0e 94 b9 05 	call	0xb72	; 0xb72 <strtok_r>
     b0e:	08 95       	ret

00000b10 <strchr>:
     b10:	fc 01       	movw	r30, r24
     b12:	81 91       	ld	r24, Z+
     b14:	86 17       	cp	r24, r22
     b16:	21 f0       	breq	.+8      	; 0xb20 <strchr+0x10>
     b18:	88 23       	and	r24, r24
     b1a:	d9 f7       	brne	.-10     	; 0xb12 <strchr+0x2>
     b1c:	99 27       	eor	r25, r25
     b1e:	08 95       	ret
     b20:	31 97       	sbiw	r30, 0x01	; 1
     b22:	cf 01       	movw	r24, r30
     b24:	08 95       	ret

00000b26 <strcmp>:
     b26:	fb 01       	movw	r30, r22
     b28:	dc 01       	movw	r26, r24
     b2a:	8d 91       	ld	r24, X+
     b2c:	01 90       	ld	r0, Z+
     b2e:	80 19       	sub	r24, r0
     b30:	01 10       	cpse	r0, r1
     b32:	d9 f3       	breq	.-10     	; 0xb2a <strcmp+0x4>
     b34:	99 0b       	sbc	r25, r25
     b36:	08 95       	ret

00000b38 <strncmp>:
     b38:	fb 01       	movw	r30, r22
     b3a:	dc 01       	movw	r26, r24
     b3c:	41 50       	subi	r20, 0x01	; 1
     b3e:	50 40       	sbci	r21, 0x00	; 0
     b40:	30 f0       	brcs	.+12     	; 0xb4e <strncmp+0x16>
     b42:	8d 91       	ld	r24, X+
     b44:	01 90       	ld	r0, Z+
     b46:	80 19       	sub	r24, r0
     b48:	19 f4       	brne	.+6      	; 0xb50 <strncmp+0x18>
     b4a:	00 20       	and	r0, r0
     b4c:	b9 f7       	brne	.-18     	; 0xb3c <strncmp+0x4>
     b4e:	88 1b       	sub	r24, r24
     b50:	99 0b       	sbc	r25, r25
     b52:	08 95       	ret

00000b54 <strncpy>:
     b54:	fb 01       	movw	r30, r22
     b56:	dc 01       	movw	r26, r24
     b58:	41 50       	subi	r20, 0x01	; 1
     b5a:	50 40       	sbci	r21, 0x00	; 0
     b5c:	48 f0       	brcs	.+18     	; 0xb70 <strncpy+0x1c>
     b5e:	01 90       	ld	r0, Z+
     b60:	0d 92       	st	X+, r0
     b62:	00 20       	and	r0, r0
     b64:	c9 f7       	brne	.-14     	; 0xb58 <strncpy+0x4>
     b66:	01 c0       	rjmp	.+2      	; 0xb6a <strncpy+0x16>
     b68:	1d 92       	st	X+, r1
     b6a:	41 50       	subi	r20, 0x01	; 1
     b6c:	50 40       	sbci	r21, 0x00	; 0
     b6e:	e0 f7       	brcc	.-8      	; 0xb68 <strncpy+0x14>
     b70:	08 95       	ret

00000b72 <strtok_r>:
     b72:	fa 01       	movw	r30, r20
     b74:	a1 91       	ld	r26, Z+
     b76:	b0 81       	ld	r27, Z
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	19 f4       	brne	.+6      	; 0xb82 <strtok_r+0x10>
     b7c:	10 97       	sbiw	r26, 0x00	; 0
     b7e:	e1 f0       	breq	.+56     	; 0xbb8 <strtok_r+0x46>
     b80:	cd 01       	movw	r24, r26
     b82:	dc 01       	movw	r26, r24
     b84:	cd 01       	movw	r24, r26
     b86:	0d 90       	ld	r0, X+
     b88:	00 20       	and	r0, r0
     b8a:	11 f4       	brne	.+4      	; 0xb90 <strtok_r+0x1e>
     b8c:	c0 01       	movw	r24, r0
     b8e:	13 c0       	rjmp	.+38     	; 0xbb6 <strtok_r+0x44>
     b90:	fb 01       	movw	r30, r22
     b92:	21 91       	ld	r18, Z+
     b94:	22 23       	and	r18, r18
     b96:	19 f0       	breq	.+6      	; 0xb9e <strtok_r+0x2c>
     b98:	20 15       	cp	r18, r0
     b9a:	d9 f7       	brne	.-10     	; 0xb92 <strtok_r+0x20>
     b9c:	f3 cf       	rjmp	.-26     	; 0xb84 <strtok_r+0x12>
     b9e:	fb 01       	movw	r30, r22
     ba0:	21 91       	ld	r18, Z+
     ba2:	20 15       	cp	r18, r0
     ba4:	19 f4       	brne	.+6      	; 0xbac <strtok_r+0x3a>
     ba6:	1e 92       	st	-X, r1
     ba8:	11 96       	adiw	r26, 0x01	; 1
     baa:	06 c0       	rjmp	.+12     	; 0xbb8 <strtok_r+0x46>
     bac:	22 23       	and	r18, r18
     bae:	c1 f7       	brne	.-16     	; 0xba0 <strtok_r+0x2e>
     bb0:	0d 90       	ld	r0, X+
     bb2:	00 20       	and	r0, r0
     bb4:	a1 f7       	brne	.-24     	; 0xb9e <strtok_r+0x2c>
     bb6:	d0 01       	movw	r26, r0
     bb8:	fa 01       	movw	r30, r20
     bba:	a1 93       	st	Z+, r26
     bbc:	b0 83       	st	Z, r27
     bbe:	08 95       	ret

00000bc0 <__mulhi_const_10>:
     bc0:	7a e0       	ldi	r23, 0x0A	; 10
     bc2:	97 9f       	mul	r25, r23
     bc4:	90 2d       	mov	r25, r0
     bc6:	87 9f       	mul	r24, r23
     bc8:	80 2d       	mov	r24, r0
     bca:	91 0d       	add	r25, r1
     bcc:	11 24       	eor	r1, r1
     bce:	08 95       	ret

00000bd0 <sscanf>:
     bd0:	ae e0       	ldi	r26, 0x0E	; 14
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	ee ee       	ldi	r30, 0xEE	; 238
     bd6:	f5 e0       	ldi	r31, 0x05	; 5
     bd8:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__prologue_saves__+0x20>
     bdc:	85 e0       	ldi	r24, 0x05	; 5
     bde:	8c 83       	std	Y+4, r24	; 0x04
     be0:	8b 89       	ldd	r24, Y+19	; 0x13
     be2:	9c 89       	ldd	r25, Y+20	; 0x14
     be4:	9a 83       	std	Y+2, r25	; 0x02
     be6:	89 83       	std	Y+1, r24	; 0x01
     be8:	ae 01       	movw	r20, r28
     bea:	49 5e       	subi	r20, 0xE9	; 233
     bec:	5f 4f       	sbci	r21, 0xFF	; 255
     bee:	6d 89       	ldd	r22, Y+21	; 0x15
     bf0:	7e 89       	ldd	r23, Y+22	; 0x16
     bf2:	ce 01       	movw	r24, r28
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	0e 94 9d 07 	call	0xf3a	; 0xf3a <vfscanf>
     bfa:	2e 96       	adiw	r28, 0x0e	; 14
     bfc:	e2 e0       	ldi	r30, 0x02	; 2
     bfe:	0c 94 48 09 	jmp	0x1290	; 0x1290 <__epilogue_restores__+0x20>

00000c02 <putval>:
     c02:	20 fd       	sbrc	r18, 0
     c04:	09 c0       	rjmp	.+18     	; 0xc18 <putval+0x16>
     c06:	fc 01       	movw	r30, r24
     c08:	23 fd       	sbrc	r18, 3
     c0a:	05 c0       	rjmp	.+10     	; 0xc16 <putval+0x14>
     c0c:	22 ff       	sbrs	r18, 2
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <putval+0x12>
     c10:	73 83       	std	Z+3, r23	; 0x03
     c12:	62 83       	std	Z+2, r22	; 0x02
     c14:	51 83       	std	Z+1, r21	; 0x01
     c16:	40 83       	st	Z, r20
     c18:	08 95       	ret

00000c1a <mulacc>:
     c1a:	44 fd       	sbrc	r20, 4
     c1c:	17 c0       	rjmp	.+46     	; 0xc4c <mulacc+0x32>
     c1e:	46 fd       	sbrc	r20, 6
     c20:	17 c0       	rjmp	.+46     	; 0xc50 <mulacc+0x36>
     c22:	ab 01       	movw	r20, r22
     c24:	bc 01       	movw	r22, r24
     c26:	da 01       	movw	r26, r20
     c28:	fb 01       	movw	r30, r22
     c2a:	aa 0f       	add	r26, r26
     c2c:	bb 1f       	adc	r27, r27
     c2e:	ee 1f       	adc	r30, r30
     c30:	ff 1f       	adc	r31, r31
     c32:	10 94       	com	r1
     c34:	d1 f7       	brne	.-12     	; 0xc2a <mulacc+0x10>
     c36:	4a 0f       	add	r20, r26
     c38:	5b 1f       	adc	r21, r27
     c3a:	6e 1f       	adc	r22, r30
     c3c:	7f 1f       	adc	r23, r31
     c3e:	cb 01       	movw	r24, r22
     c40:	ba 01       	movw	r22, r20
     c42:	66 0f       	add	r22, r22
     c44:	77 1f       	adc	r23, r23
     c46:	88 1f       	adc	r24, r24
     c48:	99 1f       	adc	r25, r25
     c4a:	09 c0       	rjmp	.+18     	; 0xc5e <mulacc+0x44>
     c4c:	33 e0       	ldi	r19, 0x03	; 3
     c4e:	01 c0       	rjmp	.+2      	; 0xc52 <mulacc+0x38>
     c50:	34 e0       	ldi	r19, 0x04	; 4
     c52:	66 0f       	add	r22, r22
     c54:	77 1f       	adc	r23, r23
     c56:	88 1f       	adc	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	31 50       	subi	r19, 0x01	; 1
     c5c:	d1 f7       	brne	.-12     	; 0xc52 <mulacc+0x38>
     c5e:	62 0f       	add	r22, r18
     c60:	71 1d       	adc	r23, r1
     c62:	81 1d       	adc	r24, r1
     c64:	91 1d       	adc	r25, r1
     c66:	08 95       	ret

00000c68 <skip_spaces>:
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	8c 01       	movw	r16, r24
     c72:	c8 01       	movw	r24, r16
     c74:	0e 94 c2 08 	call	0x1184	; 0x1184 <fgetc>
     c78:	ec 01       	movw	r28, r24
     c7a:	97 fd       	sbrc	r25, 7
     c7c:	08 c0       	rjmp	.+16     	; 0xc8e <skip_spaces+0x26>
     c7e:	0e 94 ae 08 	call	0x115c	; 0x115c <isspace>
     c82:	89 2b       	or	r24, r25
     c84:	b1 f7       	brne	.-20     	; 0xc72 <skip_spaces+0xa>
     c86:	b8 01       	movw	r22, r16
     c88:	ce 01       	movw	r24, r28
     c8a:	0e 94 00 09 	call	0x1200	; 0x1200 <ungetc>
     c8e:	ce 01       	movw	r24, r28
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	08 95       	ret

00000c9a <conv_int>:
     c9a:	8f 92       	push	r8
     c9c:	9f 92       	push	r9
     c9e:	af 92       	push	r10
     ca0:	bf 92       	push	r11
     ca2:	ef 92       	push	r14
     ca4:	ff 92       	push	r15
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	8c 01       	movw	r16, r24
     cb0:	d6 2f       	mov	r29, r22
     cb2:	7a 01       	movw	r14, r20
     cb4:	b2 2e       	mov	r11, r18
     cb6:	0e 94 c2 08 	call	0x1184	; 0x1184 <fgetc>
     cba:	9c 01       	movw	r18, r24
     cbc:	33 27       	eor	r19, r19
     cbe:	2b 32       	cpi	r18, 0x2B	; 43
     cc0:	31 05       	cpc	r19, r1
     cc2:	31 f0       	breq	.+12     	; 0xcd0 <conv_int+0x36>
     cc4:	2d 32       	cpi	r18, 0x2D	; 45
     cc6:	31 05       	cpc	r19, r1
     cc8:	61 f4       	brne	.+24     	; 0xce2 <conv_int+0x48>
     cca:	8b 2d       	mov	r24, r11
     ccc:	80 68       	ori	r24, 0x80	; 128
     cce:	b8 2e       	mov	r11, r24
     cd0:	d1 50       	subi	r29, 0x01	; 1
     cd2:	11 f4       	brne	.+4      	; 0xcd8 <conv_int+0x3e>
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	68 c0       	rjmp	.+208    	; 0xda8 <conv_int+0x10e>
     cd8:	c8 01       	movw	r24, r16
     cda:	0e 94 c2 08 	call	0x1184	; 0x1184 <fgetc>
     cde:	97 fd       	sbrc	r25, 7
     ce0:	f9 cf       	rjmp	.-14     	; 0xcd4 <conv_int+0x3a>
     ce2:	cb 2d       	mov	r28, r11
     ce4:	cd 7f       	andi	r28, 0xFD	; 253
     ce6:	2b 2d       	mov	r18, r11
     ce8:	20 73       	andi	r18, 0x30	; 48
     cea:	09 f5       	brne	.+66     	; 0xd2e <conv_int+0x94>
     cec:	80 33       	cpi	r24, 0x30	; 48
     cee:	f9 f4       	brne	.+62     	; 0xd2e <conv_int+0x94>
     cf0:	aa 24       	eor	r10, r10
     cf2:	aa 94       	dec	r10
     cf4:	ad 0e       	add	r10, r29
     cf6:	09 f4       	brne	.+2      	; 0xcfa <conv_int+0x60>
     cf8:	43 c0       	rjmp	.+134    	; 0xd80 <conv_int+0xe6>
     cfa:	c8 01       	movw	r24, r16
     cfc:	0e 94 c2 08 	call	0x1184	; 0x1184 <fgetc>
     d00:	97 fd       	sbrc	r25, 7
     d02:	3e c0       	rjmp	.+124    	; 0xd80 <conv_int+0xe6>
     d04:	9c 01       	movw	r18, r24
     d06:	2f 7d       	andi	r18, 0xDF	; 223
     d08:	33 27       	eor	r19, r19
     d0a:	28 35       	cpi	r18, 0x58	; 88
     d0c:	31 05       	cpc	r19, r1
     d0e:	49 f4       	brne	.+18     	; 0xd22 <conv_int+0x88>
     d10:	c2 64       	ori	r28, 0x42	; 66
     d12:	d2 50       	subi	r29, 0x02	; 2
     d14:	a9 f1       	breq	.+106    	; 0xd80 <conv_int+0xe6>
     d16:	c8 01       	movw	r24, r16
     d18:	0e 94 c2 08 	call	0x1184	; 0x1184 <fgetc>
     d1c:	97 ff       	sbrs	r25, 7
     d1e:	07 c0       	rjmp	.+14     	; 0xd2e <conv_int+0x94>
     d20:	2f c0       	rjmp	.+94     	; 0xd80 <conv_int+0xe6>
     d22:	b6 fe       	sbrs	r11, 6
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <conv_int+0x90>
     d26:	c2 60       	ori	r28, 0x02	; 2
     d28:	01 c0       	rjmp	.+2      	; 0xd2c <conv_int+0x92>
     d2a:	c2 61       	ori	r28, 0x12	; 18
     d2c:	da 2d       	mov	r29, r10
     d2e:	81 2c       	mov	r8, r1
     d30:	91 2c       	mov	r9, r1
     d32:	54 01       	movw	r10, r8
     d34:	20 ed       	ldi	r18, 0xD0	; 208
     d36:	28 0f       	add	r18, r24
     d38:	28 30       	cpi	r18, 0x08	; 8
     d3a:	80 f0       	brcs	.+32     	; 0xd5c <conv_int+0xc2>
     d3c:	c4 ff       	sbrs	r28, 4
     d3e:	04 c0       	rjmp	.+8      	; 0xd48 <conv_int+0xae>
     d40:	b8 01       	movw	r22, r16
     d42:	0e 94 00 09 	call	0x1200	; 0x1200 <ungetc>
     d46:	19 c0       	rjmp	.+50     	; 0xd7a <conv_int+0xe0>
     d48:	2a 30       	cpi	r18, 0x0A	; 10
     d4a:	40 f0       	brcs	.+16     	; 0xd5c <conv_int+0xc2>
     d4c:	c6 ff       	sbrs	r28, 6
     d4e:	f8 cf       	rjmp	.-16     	; 0xd40 <conv_int+0xa6>
     d50:	2f 7d       	andi	r18, 0xDF	; 223
     d52:	3f ee       	ldi	r19, 0xEF	; 239
     d54:	32 0f       	add	r19, r18
     d56:	36 30       	cpi	r19, 0x06	; 6
     d58:	98 f7       	brcc	.-26     	; 0xd40 <conv_int+0xa6>
     d5a:	27 50       	subi	r18, 0x07	; 7
     d5c:	4c 2f       	mov	r20, r28
     d5e:	c5 01       	movw	r24, r10
     d60:	b4 01       	movw	r22, r8
     d62:	0e 94 0d 06 	call	0xc1a	; 0xc1a <mulacc>
     d66:	4b 01       	movw	r8, r22
     d68:	5c 01       	movw	r10, r24
     d6a:	c2 60       	ori	r28, 0x02	; 2
     d6c:	d1 50       	subi	r29, 0x01	; 1
     d6e:	59 f0       	breq	.+22     	; 0xd86 <conv_int+0xec>
     d70:	c8 01       	movw	r24, r16
     d72:	0e 94 c2 08 	call	0x1184	; 0x1184 <fgetc>
     d76:	97 ff       	sbrs	r25, 7
     d78:	dd cf       	rjmp	.-70     	; 0xd34 <conv_int+0x9a>
     d7a:	c1 fd       	sbrc	r28, 1
     d7c:	04 c0       	rjmp	.+8      	; 0xd86 <conv_int+0xec>
     d7e:	aa cf       	rjmp	.-172    	; 0xcd4 <conv_int+0x3a>
     d80:	81 2c       	mov	r8, r1
     d82:	91 2c       	mov	r9, r1
     d84:	54 01       	movw	r10, r8
     d86:	c7 ff       	sbrs	r28, 7
     d88:	08 c0       	rjmp	.+16     	; 0xd9a <conv_int+0x100>
     d8a:	b0 94       	com	r11
     d8c:	a0 94       	com	r10
     d8e:	90 94       	com	r9
     d90:	80 94       	com	r8
     d92:	81 1c       	adc	r8, r1
     d94:	91 1c       	adc	r9, r1
     d96:	a1 1c       	adc	r10, r1
     d98:	b1 1c       	adc	r11, r1
     d9a:	2c 2f       	mov	r18, r28
     d9c:	b5 01       	movw	r22, r10
     d9e:	a4 01       	movw	r20, r8
     da0:	c7 01       	movw	r24, r14
     da2:	0e 94 01 06 	call	0xc02	; 0xc02 <putval>
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	ff 90       	pop	r15
     db2:	ef 90       	pop	r14
     db4:	bf 90       	pop	r11
     db6:	af 90       	pop	r10
     db8:	9f 90       	pop	r9
     dba:	8f 90       	pop	r8
     dbc:	08 95       	ret

00000dbe <conv_brk>:
     dbe:	a0 e2       	ldi	r26, 0x20	; 32
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e5 ee       	ldi	r30, 0xE5	; 229
     dc4:	f6 e0       	ldi	r31, 0x06	; 6
     dc6:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__prologue_saves__+0x6>
     dca:	5c 01       	movw	r10, r24
     dcc:	96 2e       	mov	r9, r22
     dce:	7a 01       	movw	r14, r20
     dd0:	f9 01       	movw	r30, r18
     dd2:	8e 01       	movw	r16, r28
     dd4:	0f 5f       	subi	r16, 0xFF	; 255
     dd6:	1f 4f       	sbci	r17, 0xFF	; 255
     dd8:	68 01       	movw	r12, r16
     dda:	80 e2       	ldi	r24, 0x20	; 32
     ddc:	d8 01       	movw	r26, r16
     dde:	1d 92       	st	X+, r1
     de0:	8a 95       	dec	r24
     de2:	e9 f7       	brne	.-6      	; 0xdde <conv_brk+0x20>
     de4:	d5 01       	movw	r26, r10
     de6:	13 96       	adiw	r26, 0x03	; 3
     de8:	8c 90       	ld	r8, X
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	61 2c       	mov	r6, r1
     df0:	71 2c       	mov	r7, r1
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	61 e0       	ldi	r22, 0x01	; 1
     df6:	70 e0       	ldi	r23, 0x00	; 0
     df8:	83 fc       	sbrc	r8, 3
     dfa:	25 91       	lpm	r18, Z+
     dfc:	83 fe       	sbrs	r8, 3
     dfe:	21 91       	ld	r18, Z+
     e00:	8f 01       	movw	r16, r30
     e02:	52 2e       	mov	r5, r18
     e04:	21 11       	cpse	r18, r1
     e06:	03 c0       	rjmp	.+6      	; 0xe0e <conv_brk+0x50>
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	92 c0       	rjmp	.+292    	; 0xf32 <conv_brk+0x174>
     e0e:	2e 35       	cpi	r18, 0x5E	; 94
     e10:	11 f4       	brne	.+4      	; 0xe16 <conv_brk+0x58>
     e12:	00 97       	sbiw	r24, 0x00	; 0
     e14:	51 f1       	breq	.+84     	; 0xe6a <conv_brk+0xac>
     e16:	43 2f       	mov	r20, r19
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	48 17       	cp	r20, r24
     e1c:	59 07       	cpc	r21, r25
     e1e:	3c f4       	brge	.+14     	; 0xe2e <conv_brk+0x70>
     e20:	2d 35       	cpi	r18, 0x5D	; 93
     e22:	59 f1       	breq	.+86     	; 0xe7a <conv_brk+0xbc>
     e24:	2d 32       	cpi	r18, 0x2D	; 45
     e26:	19 f4       	brne	.+6      	; 0xe2e <conv_brk+0x70>
     e28:	77 20       	and	r7, r7
     e2a:	09 f1       	breq	.+66     	; 0xe6e <conv_brk+0xb0>
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <conv_brk+0x76>
     e2e:	77 20       	and	r7, r7
     e30:	09 f4       	brne	.+2      	; 0xe34 <conv_brk+0x76>
     e32:	6a c0       	rjmp	.+212    	; 0xf08 <conv_brk+0x14a>
     e34:	45 2d       	mov	r20, r5
     e36:	46 95       	lsr	r20
     e38:	46 95       	lsr	r20
     e3a:	46 95       	lsr	r20
     e3c:	d6 01       	movw	r26, r12
     e3e:	a4 0f       	add	r26, r20
     e40:	b1 1d       	adc	r27, r1
     e42:	45 2d       	mov	r20, r5
     e44:	47 70       	andi	r20, 0x07	; 7
     e46:	8b 01       	movw	r16, r22
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <conv_brk+0x90>
     e4a:	00 0f       	add	r16, r16
     e4c:	11 1f       	adc	r17, r17
     e4e:	4a 95       	dec	r20
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <conv_brk+0x8c>
     e52:	a8 01       	movw	r20, r16
     e54:	5c 91       	ld	r21, X
     e56:	45 2b       	or	r20, r21
     e58:	4c 93       	st	X, r20
     e5a:	65 14       	cp	r6, r5
     e5c:	59 f0       	breq	.+22     	; 0xe74 <conv_brk+0xb6>
     e5e:	56 14       	cp	r5, r6
     e60:	10 f4       	brcc	.+4      	; 0xe66 <conv_brk+0xa8>
     e62:	53 94       	inc	r5
     e64:	e7 cf       	rjmp	.-50     	; 0xe34 <conv_brk+0x76>
     e66:	5a 94       	dec	r5
     e68:	e5 cf       	rjmp	.-54     	; 0xe34 <conv_brk+0x76>
     e6a:	31 e0       	ldi	r19, 0x01	; 1
     e6c:	04 c0       	rjmp	.+8      	; 0xe76 <conv_brk+0xb8>
     e6e:	77 24       	eor	r7, r7
     e70:	73 94       	inc	r7
     e72:	01 c0       	rjmp	.+2      	; 0xe76 <conv_brk+0xb8>
     e74:	71 2c       	mov	r7, r1
     e76:	01 96       	adiw	r24, 0x01	; 1
     e78:	bf cf       	rjmp	.-130    	; 0xdf8 <conv_brk+0x3a>
     e7a:	77 20       	and	r7, r7
     e7c:	19 f0       	breq	.+6      	; 0xe84 <conv_brk+0xc6>
     e7e:	8e 81       	ldd	r24, Y+6	; 0x06
     e80:	80 62       	ori	r24, 0x20	; 32
     e82:	8e 83       	std	Y+6, r24	; 0x06
     e84:	31 11       	cpse	r19, r1
     e86:	03 c0       	rjmp	.+6      	; 0xe8e <conv_brk+0xd0>
     e88:	88 24       	eor	r8, r8
     e8a:	83 94       	inc	r8
     e8c:	17 c0       	rjmp	.+46     	; 0xebc <conv_brk+0xfe>
     e8e:	f6 01       	movw	r30, r12
     e90:	9e 01       	movw	r18, r28
     e92:	2f 5d       	subi	r18, 0xDF	; 223
     e94:	3f 4f       	sbci	r19, 0xFF	; 255
     e96:	80 81       	ld	r24, Z
     e98:	80 95       	com	r24
     e9a:	81 93       	st	Z+, r24
     e9c:	2e 17       	cp	r18, r30
     e9e:	3f 07       	cpc	r19, r31
     ea0:	d1 f7       	brne	.-12     	; 0xe96 <conv_brk+0xd8>
     ea2:	f2 cf       	rjmp	.-28     	; 0xe88 <conv_brk+0xca>
     ea4:	e1 14       	cp	r14, r1
     ea6:	f1 04       	cpc	r15, r1
     ea8:	29 f0       	breq	.+10     	; 0xeb4 <conv_brk+0xf6>
     eaa:	d7 01       	movw	r26, r14
     eac:	8c 93       	st	X, r24
     eae:	f7 01       	movw	r30, r14
     eb0:	31 96       	adiw	r30, 0x01	; 1
     eb2:	7f 01       	movw	r14, r30
     eb4:	9a 94       	dec	r9
     eb6:	81 2c       	mov	r8, r1
     eb8:	99 20       	and	r9, r9
     eba:	f9 f0       	breq	.+62     	; 0xefa <conv_brk+0x13c>
     ebc:	c5 01       	movw	r24, r10
     ebe:	0e 94 c2 08 	call	0x1184	; 0x1184 <fgetc>
     ec2:	97 fd       	sbrc	r25, 7
     ec4:	18 c0       	rjmp	.+48     	; 0xef6 <conv_brk+0x138>
     ec6:	fc 01       	movw	r30, r24
     ec8:	ff 27       	eor	r31, r31
     eca:	23 e0       	ldi	r18, 0x03	; 3
     ecc:	f5 95       	asr	r31
     ece:	e7 95       	ror	r30
     ed0:	2a 95       	dec	r18
     ed2:	e1 f7       	brne	.-8      	; 0xecc <conv_brk+0x10e>
     ed4:	ec 0d       	add	r30, r12
     ed6:	fd 1d       	adc	r31, r13
     ed8:	20 81       	ld	r18, Z
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	ac 01       	movw	r20, r24
     ede:	47 70       	andi	r20, 0x07	; 7
     ee0:	55 27       	eor	r21, r21
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <conv_brk+0x12a>
     ee4:	35 95       	asr	r19
     ee6:	27 95       	ror	r18
     ee8:	4a 95       	dec	r20
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <conv_brk+0x126>
     eec:	20 fd       	sbrc	r18, 0
     eee:	da cf       	rjmp	.-76     	; 0xea4 <conv_brk+0xe6>
     ef0:	b5 01       	movw	r22, r10
     ef2:	0e 94 00 09 	call	0x1200	; 0x1200 <ungetc>
     ef6:	81 10       	cpse	r8, r1
     ef8:	87 cf       	rjmp	.-242    	; 0xe08 <conv_brk+0x4a>
     efa:	e1 14       	cp	r14, r1
     efc:	f1 04       	cpc	r15, r1
     efe:	11 f0       	breq	.+4      	; 0xf04 <conv_brk+0x146>
     f00:	d7 01       	movw	r26, r14
     f02:	1c 92       	st	X, r1
     f04:	c8 01       	movw	r24, r16
     f06:	15 c0       	rjmp	.+42     	; 0xf32 <conv_brk+0x174>
     f08:	42 2f       	mov	r20, r18
     f0a:	46 95       	lsr	r20
     f0c:	46 95       	lsr	r20
     f0e:	46 95       	lsr	r20
     f10:	d6 01       	movw	r26, r12
     f12:	a4 0f       	add	r26, r20
     f14:	b1 1d       	adc	r27, r1
     f16:	42 2f       	mov	r20, r18
     f18:	47 70       	andi	r20, 0x07	; 7
     f1a:	8b 01       	movw	r16, r22
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <conv_brk+0x164>
     f1e:	00 0f       	add	r16, r16
     f20:	11 1f       	adc	r17, r17
     f22:	4a 95       	dec	r20
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <conv_brk+0x160>
     f26:	a8 01       	movw	r20, r16
     f28:	5c 91       	ld	r21, X
     f2a:	45 2b       	or	r20, r21
     f2c:	4c 93       	st	X, r20
     f2e:	62 2e       	mov	r6, r18
     f30:	a2 cf       	rjmp	.-188    	; 0xe76 <conv_brk+0xb8>
     f32:	a0 96       	adiw	r28, 0x20	; 32
     f34:	ef e0       	ldi	r30, 0x0F	; 15
     f36:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__epilogue_restores__+0x6>

00000f3a <vfscanf>:
     f3a:	a0 e0       	ldi	r26, 0x00	; 0
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e3 ea       	ldi	r30, 0xA3	; 163
     f40:	f7 e0       	ldi	r31, 0x07	; 7
     f42:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__prologue_saves__+0x6>
     f46:	6c 01       	movw	r12, r24
     f48:	eb 01       	movw	r28, r22
     f4a:	5a 01       	movw	r10, r20
     f4c:	fc 01       	movw	r30, r24
     f4e:	17 82       	std	Z+7, r1	; 0x07
     f50:	16 82       	std	Z+6, r1	; 0x06
     f52:	51 2c       	mov	r5, r1
     f54:	f6 01       	movw	r30, r12
     f56:	e3 80       	ldd	r14, Z+3	; 0x03
     f58:	fe 01       	movw	r30, r28
     f5a:	e3 fc       	sbrc	r14, 3
     f5c:	85 91       	lpm	r24, Z+
     f5e:	e3 fe       	sbrs	r14, 3
     f60:	81 91       	ld	r24, Z+
     f62:	18 2f       	mov	r17, r24
     f64:	ef 01       	movw	r28, r30
     f66:	88 23       	and	r24, r24
     f68:	09 f4       	brne	.+2      	; 0xf6c <vfscanf+0x32>
     f6a:	ee c0       	rjmp	.+476    	; 0x1148 <vfscanf+0x20e>
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 ae 08 	call	0x115c	; 0x115c <isspace>
     f72:	89 2b       	or	r24, r25
     f74:	21 f0       	breq	.+8      	; 0xf7e <vfscanf+0x44>
     f76:	c6 01       	movw	r24, r12
     f78:	0e 94 34 06 	call	0xc68	; 0xc68 <skip_spaces>
     f7c:	eb cf       	rjmp	.-42     	; 0xf54 <vfscanf+0x1a>
     f7e:	15 32       	cpi	r17, 0x25	; 37
     f80:	41 f4       	brne	.+16     	; 0xf92 <vfscanf+0x58>
     f82:	fe 01       	movw	r30, r28
     f84:	e3 fc       	sbrc	r14, 3
     f86:	15 91       	lpm	r17, Z+
     f88:	e3 fe       	sbrs	r14, 3
     f8a:	11 91       	ld	r17, Z+
     f8c:	ef 01       	movw	r28, r30
     f8e:	15 32       	cpi	r17, 0x25	; 37
     f90:	81 f4       	brne	.+32     	; 0xfb2 <vfscanf+0x78>
     f92:	c6 01       	movw	r24, r12
     f94:	0e 94 c2 08 	call	0x1184	; 0x1184 <fgetc>
     f98:	97 fd       	sbrc	r25, 7
     f9a:	d4 c0       	rjmp	.+424    	; 0x1144 <vfscanf+0x20a>
     f9c:	41 2f       	mov	r20, r17
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	9c 01       	movw	r18, r24
     fa2:	33 27       	eor	r19, r19
     fa4:	24 17       	cp	r18, r20
     fa6:	35 07       	cpc	r19, r21
     fa8:	a9 f2       	breq	.-86     	; 0xf54 <vfscanf+0x1a>
     faa:	b6 01       	movw	r22, r12
     fac:	0e 94 00 09 	call	0x1200	; 0x1200 <ungetc>
     fb0:	cb c0       	rjmp	.+406    	; 0x1148 <vfscanf+0x20e>
     fb2:	1a 32       	cpi	r17, 0x2A	; 42
     fb4:	39 f4       	brne	.+14     	; 0xfc4 <vfscanf+0x8a>
     fb6:	e3 fc       	sbrc	r14, 3
     fb8:	15 91       	lpm	r17, Z+
     fba:	e3 fe       	sbrs	r14, 3
     fbc:	11 91       	ld	r17, Z+
     fbe:	ef 01       	movw	r28, r30
     fc0:	01 e0       	ldi	r16, 0x01	; 1
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <vfscanf+0x8c>
     fc4:	00 e0       	ldi	r16, 0x00	; 0
     fc6:	f1 2c       	mov	r15, r1
     fc8:	20 ed       	ldi	r18, 0xD0	; 208
     fca:	21 0f       	add	r18, r17
     fcc:	2a 30       	cpi	r18, 0x0A	; 10
     fce:	80 f4       	brcc	.+32     	; 0xff0 <vfscanf+0xb6>
     fd0:	02 60       	ori	r16, 0x02	; 2
     fd2:	6f 2d       	mov	r22, r15
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	40 e2       	ldi	r20, 0x20	; 32
     fdc:	0e 94 0d 06 	call	0xc1a	; 0xc1a <mulacc>
     fe0:	f6 2e       	mov	r15, r22
     fe2:	fe 01       	movw	r30, r28
     fe4:	e3 fc       	sbrc	r14, 3
     fe6:	15 91       	lpm	r17, Z+
     fe8:	e3 fe       	sbrs	r14, 3
     fea:	11 91       	ld	r17, Z+
     fec:	ef 01       	movw	r28, r30
     fee:	ec cf       	rjmp	.-40     	; 0xfc8 <vfscanf+0x8e>
     ff0:	01 ff       	sbrs	r16, 1
     ff2:	03 c0       	rjmp	.+6      	; 0xffa <vfscanf+0xc0>
     ff4:	f1 10       	cpse	r15, r1
     ff6:	03 c0       	rjmp	.+6      	; 0xffe <vfscanf+0xc4>
     ff8:	a7 c0       	rjmp	.+334    	; 0x1148 <vfscanf+0x20e>
     ffa:	ff 24       	eor	r15, r15
     ffc:	fa 94       	dec	r15
     ffe:	18 36       	cpi	r17, 0x68	; 104
    1000:	19 f0       	breq	.+6      	; 0x1008 <vfscanf+0xce>
    1002:	1c 36       	cpi	r17, 0x6C	; 108
    1004:	51 f0       	breq	.+20     	; 0x101a <vfscanf+0xe0>
    1006:	10 c0       	rjmp	.+32     	; 0x1028 <vfscanf+0xee>
    1008:	fe 01       	movw	r30, r28
    100a:	e3 fc       	sbrc	r14, 3
    100c:	15 91       	lpm	r17, Z+
    100e:	e3 fe       	sbrs	r14, 3
    1010:	11 91       	ld	r17, Z+
    1012:	ef 01       	movw	r28, r30
    1014:	18 36       	cpi	r17, 0x68	; 104
    1016:	41 f4       	brne	.+16     	; 0x1028 <vfscanf+0xee>
    1018:	08 60       	ori	r16, 0x08	; 8
    101a:	04 60       	ori	r16, 0x04	; 4
    101c:	fe 01       	movw	r30, r28
    101e:	e3 fc       	sbrc	r14, 3
    1020:	15 91       	lpm	r17, Z+
    1022:	e3 fe       	sbrs	r14, 3
    1024:	11 91       	ld	r17, Z+
    1026:	ef 01       	movw	r28, r30
    1028:	11 23       	and	r17, r17
    102a:	09 f4       	brne	.+2      	; 0x102e <vfscanf+0xf4>
    102c:	8d c0       	rjmp	.+282    	; 0x1148 <vfscanf+0x20e>
    102e:	61 2f       	mov	r22, r17
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	88 e6       	ldi	r24, 0x68	; 104
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 b7 08 	call	0x116e	; 0x116e <strchr_P>
    103a:	89 2b       	or	r24, r25
    103c:	09 f4       	brne	.+2      	; 0x1040 <vfscanf+0x106>
    103e:	84 c0       	rjmp	.+264    	; 0x1148 <vfscanf+0x20e>
    1040:	00 fd       	sbrc	r16, 0
    1042:	07 c0       	rjmp	.+14     	; 0x1052 <vfscanf+0x118>
    1044:	f5 01       	movw	r30, r10
    1046:	80 80       	ld	r8, Z
    1048:	91 80       	ldd	r9, Z+1	; 0x01
    104a:	c5 01       	movw	r24, r10
    104c:	02 96       	adiw	r24, 0x02	; 2
    104e:	5c 01       	movw	r10, r24
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <vfscanf+0x11c>
    1052:	81 2c       	mov	r8, r1
    1054:	91 2c       	mov	r9, r1
    1056:	1e 36       	cpi	r17, 0x6E	; 110
    1058:	51 f4       	brne	.+20     	; 0x106e <vfscanf+0x134>
    105a:	f6 01       	movw	r30, r12
    105c:	46 81       	ldd	r20, Z+6	; 0x06
    105e:	57 81       	ldd	r21, Z+7	; 0x07
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	20 2f       	mov	r18, r16
    1066:	c4 01       	movw	r24, r8
    1068:	0e 94 01 06 	call	0xc02	; 0xc02 <putval>
    106c:	73 cf       	rjmp	.-282    	; 0xf54 <vfscanf+0x1a>
    106e:	13 36       	cpi	r17, 0x63	; 99
    1070:	a9 f4       	brne	.+42     	; 0x109c <vfscanf+0x162>
    1072:	01 fd       	sbrc	r16, 1
    1074:	02 c0       	rjmp	.+4      	; 0x107a <vfscanf+0x140>
    1076:	ff 24       	eor	r15, r15
    1078:	f3 94       	inc	r15
    107a:	c6 01       	movw	r24, r12
    107c:	0e 94 c2 08 	call	0x1184	; 0x1184 <fgetc>
    1080:	97 fd       	sbrc	r25, 7
    1082:	60 c0       	rjmp	.+192    	; 0x1144 <vfscanf+0x20a>
    1084:	81 14       	cp	r8, r1
    1086:	91 04       	cpc	r9, r1
    1088:	29 f0       	breq	.+10     	; 0x1094 <vfscanf+0x15a>
    108a:	f4 01       	movw	r30, r8
    108c:	80 83       	st	Z, r24
    108e:	c4 01       	movw	r24, r8
    1090:	01 96       	adiw	r24, 0x01	; 1
    1092:	4c 01       	movw	r8, r24
    1094:	fa 94       	dec	r15
    1096:	f1 10       	cpse	r15, r1
    1098:	f0 cf       	rjmp	.-32     	; 0x107a <vfscanf+0x140>
    109a:	50 c0       	rjmp	.+160    	; 0x113c <vfscanf+0x202>
    109c:	1b 35       	cpi	r17, 0x5B	; 91
    109e:	59 f4       	brne	.+22     	; 0x10b6 <vfscanf+0x17c>
    10a0:	9e 01       	movw	r18, r28
    10a2:	a4 01       	movw	r20, r8
    10a4:	6f 2d       	mov	r22, r15
    10a6:	c6 01       	movw	r24, r12
    10a8:	0e 94 df 06 	call	0xdbe	; 0xdbe <conv_brk>
    10ac:	ec 01       	movw	r28, r24
    10ae:	89 2b       	or	r24, r25
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <vfscanf+0x17a>
    10b2:	44 c0       	rjmp	.+136    	; 0x113c <vfscanf+0x202>
    10b4:	3e c0       	rjmp	.+124    	; 0x1132 <vfscanf+0x1f8>
    10b6:	c6 01       	movw	r24, r12
    10b8:	0e 94 34 06 	call	0xc68	; 0xc68 <skip_spaces>
    10bc:	97 fd       	sbrc	r25, 7
    10be:	42 c0       	rjmp	.+132    	; 0x1144 <vfscanf+0x20a>
    10c0:	1f 36       	cpi	r17, 0x6F	; 111
    10c2:	61 f1       	breq	.+88     	; 0x111c <vfscanf+0x1e2>
    10c4:	28 f4       	brcc	.+10     	; 0x10d0 <vfscanf+0x196>
    10c6:	14 36       	cpi	r17, 0x64	; 100
    10c8:	39 f1       	breq	.+78     	; 0x1118 <vfscanf+0x1de>
    10ca:	19 36       	cpi	r17, 0x69	; 105
    10cc:	51 f1       	breq	.+84     	; 0x1122 <vfscanf+0x1e8>
    10ce:	28 c0       	rjmp	.+80     	; 0x1120 <vfscanf+0x1e6>
    10d0:	13 37       	cpi	r17, 0x73	; 115
    10d2:	71 f0       	breq	.+28     	; 0x10f0 <vfscanf+0x1b6>
    10d4:	15 37       	cpi	r17, 0x75	; 117
    10d6:	01 f1       	breq	.+64     	; 0x1118 <vfscanf+0x1de>
    10d8:	23 c0       	rjmp	.+70     	; 0x1120 <vfscanf+0x1e6>
    10da:	81 14       	cp	r8, r1
    10dc:	91 04       	cpc	r9, r1
    10de:	29 f0       	breq	.+10     	; 0x10ea <vfscanf+0x1b0>
    10e0:	f4 01       	movw	r30, r8
    10e2:	60 82       	st	Z, r6
    10e4:	c4 01       	movw	r24, r8
    10e6:	01 96       	adiw	r24, 0x01	; 1
    10e8:	4c 01       	movw	r8, r24
    10ea:	fa 94       	dec	r15
    10ec:	ff 20       	and	r15, r15
    10ee:	71 f0       	breq	.+28     	; 0x110c <vfscanf+0x1d2>
    10f0:	c6 01       	movw	r24, r12
    10f2:	0e 94 c2 08 	call	0x1184	; 0x1184 <fgetc>
    10f6:	3c 01       	movw	r6, r24
    10f8:	97 fd       	sbrc	r25, 7
    10fa:	08 c0       	rjmp	.+16     	; 0x110c <vfscanf+0x1d2>
    10fc:	0e 94 ae 08 	call	0x115c	; 0x115c <isspace>
    1100:	89 2b       	or	r24, r25
    1102:	59 f3       	breq	.-42     	; 0x10da <vfscanf+0x1a0>
    1104:	b6 01       	movw	r22, r12
    1106:	c3 01       	movw	r24, r6
    1108:	0e 94 00 09 	call	0x1200	; 0x1200 <ungetc>
    110c:	81 14       	cp	r8, r1
    110e:	91 04       	cpc	r9, r1
    1110:	a9 f0       	breq	.+42     	; 0x113c <vfscanf+0x202>
    1112:	f4 01       	movw	r30, r8
    1114:	10 82       	st	Z, r1
    1116:	12 c0       	rjmp	.+36     	; 0x113c <vfscanf+0x202>
    1118:	00 62       	ori	r16, 0x20	; 32
    111a:	03 c0       	rjmp	.+6      	; 0x1122 <vfscanf+0x1e8>
    111c:	00 61       	ori	r16, 0x10	; 16
    111e:	01 c0       	rjmp	.+2      	; 0x1122 <vfscanf+0x1e8>
    1120:	00 64       	ori	r16, 0x40	; 64
    1122:	20 2f       	mov	r18, r16
    1124:	a4 01       	movw	r20, r8
    1126:	6f 2d       	mov	r22, r15
    1128:	c6 01       	movw	r24, r12
    112a:	0e 94 4d 06 	call	0xc9a	; 0xc9a <conv_int>
    112e:	81 11       	cpse	r24, r1
    1130:	05 c0       	rjmp	.+10     	; 0x113c <vfscanf+0x202>
    1132:	f6 01       	movw	r30, r12
    1134:	83 81       	ldd	r24, Z+3	; 0x03
    1136:	80 73       	andi	r24, 0x30	; 48
    1138:	29 f4       	brne	.+10     	; 0x1144 <vfscanf+0x20a>
    113a:	06 c0       	rjmp	.+12     	; 0x1148 <vfscanf+0x20e>
    113c:	00 fd       	sbrc	r16, 0
    113e:	0a cf       	rjmp	.-492    	; 0xf54 <vfscanf+0x1a>
    1140:	53 94       	inc	r5
    1142:	08 cf       	rjmp	.-496    	; 0xf54 <vfscanf+0x1a>
    1144:	55 20       	and	r5, r5
    1146:	19 f0       	breq	.+6      	; 0x114e <vfscanf+0x214>
    1148:	85 2d       	mov	r24, r5
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <vfscanf+0x218>
    114e:	8f ef       	ldi	r24, 0xFF	; 255
    1150:	9f ef       	ldi	r25, 0xFF	; 255
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	ef e0       	ldi	r30, 0x0F	; 15
    1158:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__epilogue_restores__+0x6>

0000115c <isspace>:
    115c:	91 11       	cpse	r25, r1
    115e:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__ctype_isfalse>
    1162:	80 32       	cpi	r24, 0x20	; 32
    1164:	19 f0       	breq	.+6      	; 0x116c <isspace+0x10>
    1166:	89 50       	subi	r24, 0x09	; 9
    1168:	85 50       	subi	r24, 0x05	; 5
    116a:	c8 f7       	brcc	.-14     	; 0x115e <isspace+0x2>
    116c:	08 95       	ret

0000116e <strchr_P>:
    116e:	fc 01       	movw	r30, r24
    1170:	05 90       	lpm	r0, Z+
    1172:	06 16       	cp	r0, r22
    1174:	21 f0       	breq	.+8      	; 0x117e <strchr_P+0x10>
    1176:	00 20       	and	r0, r0
    1178:	d9 f7       	brne	.-10     	; 0x1170 <strchr_P+0x2>
    117a:	c0 01       	movw	r24, r0
    117c:	08 95       	ret
    117e:	31 97       	sbiw	r30, 0x01	; 1
    1180:	cf 01       	movw	r24, r30
    1182:	08 95       	ret

00001184 <fgetc>:
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	ec 01       	movw	r28, r24
    118a:	2b 81       	ldd	r18, Y+3	; 0x03
    118c:	20 ff       	sbrs	r18, 0
    118e:	33 c0       	rjmp	.+102    	; 0x11f6 <fgetc+0x72>
    1190:	26 ff       	sbrs	r18, 6
    1192:	0a c0       	rjmp	.+20     	; 0x11a8 <fgetc+0x24>
    1194:	2f 7b       	andi	r18, 0xBF	; 191
    1196:	2b 83       	std	Y+3, r18	; 0x03
    1198:	8e 81       	ldd	r24, Y+6	; 0x06
    119a:	9f 81       	ldd	r25, Y+7	; 0x07
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	9f 83       	std	Y+7, r25	; 0x07
    11a0:	8e 83       	std	Y+6, r24	; 0x06
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	29 c0       	rjmp	.+82     	; 0x11fa <fgetc+0x76>
    11a8:	22 ff       	sbrs	r18, 2
    11aa:	0f c0       	rjmp	.+30     	; 0x11ca <fgetc+0x46>
    11ac:	e8 81       	ld	r30, Y
    11ae:	f9 81       	ldd	r31, Y+1	; 0x01
    11b0:	80 81       	ld	r24, Z
    11b2:	08 2e       	mov	r0, r24
    11b4:	00 0c       	add	r0, r0
    11b6:	99 0b       	sbc	r25, r25
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	19 f4       	brne	.+6      	; 0x11c2 <fgetc+0x3e>
    11bc:	20 62       	ori	r18, 0x20	; 32
    11be:	2b 83       	std	Y+3, r18	; 0x03
    11c0:	1a c0       	rjmp	.+52     	; 0x11f6 <fgetc+0x72>
    11c2:	31 96       	adiw	r30, 0x01	; 1
    11c4:	f9 83       	std	Y+1, r31	; 0x01
    11c6:	e8 83       	st	Y, r30
    11c8:	0e c0       	rjmp	.+28     	; 0x11e6 <fgetc+0x62>
    11ca:	ea 85       	ldd	r30, Y+10	; 0x0a
    11cc:	fb 85       	ldd	r31, Y+11	; 0x0b
    11ce:	09 95       	icall
    11d0:	97 ff       	sbrs	r25, 7
    11d2:	09 c0       	rjmp	.+18     	; 0x11e6 <fgetc+0x62>
    11d4:	2b 81       	ldd	r18, Y+3	; 0x03
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	11 f0       	breq	.+4      	; 0x11de <fgetc+0x5a>
    11da:	80 e2       	ldi	r24, 0x20	; 32
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0 <fgetc+0x5c>
    11de:	80 e1       	ldi	r24, 0x10	; 16
    11e0:	82 2b       	or	r24, r18
    11e2:	8b 83       	std	Y+3, r24	; 0x03
    11e4:	08 c0       	rjmp	.+16     	; 0x11f6 <fgetc+0x72>
    11e6:	2e 81       	ldd	r18, Y+6	; 0x06
    11e8:	3f 81       	ldd	r19, Y+7	; 0x07
    11ea:	2f 5f       	subi	r18, 0xFF	; 255
    11ec:	3f 4f       	sbci	r19, 0xFF	; 255
    11ee:	3f 83       	std	Y+7, r19	; 0x07
    11f0:	2e 83       	std	Y+6, r18	; 0x06
    11f2:	99 27       	eor	r25, r25
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <fgetc+0x76>
    11f6:	8f ef       	ldi	r24, 0xFF	; 255
    11f8:	9f ef       	ldi	r25, 0xFF	; 255
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <ungetc>:
    1200:	fb 01       	movw	r30, r22
    1202:	23 81       	ldd	r18, Z+3	; 0x03
    1204:	20 ff       	sbrs	r18, 0
    1206:	12 c0       	rjmp	.+36     	; 0x122c <ungetc+0x2c>
    1208:	26 fd       	sbrc	r18, 6
    120a:	10 c0       	rjmp	.+32     	; 0x122c <ungetc+0x2c>
    120c:	8f 3f       	cpi	r24, 0xFF	; 255
    120e:	3f ef       	ldi	r19, 0xFF	; 255
    1210:	93 07       	cpc	r25, r19
    1212:	61 f0       	breq	.+24     	; 0x122c <ungetc+0x2c>
    1214:	82 83       	std	Z+2, r24	; 0x02
    1216:	2f 7d       	andi	r18, 0xDF	; 223
    1218:	20 64       	ori	r18, 0x40	; 64
    121a:	23 83       	std	Z+3, r18	; 0x03
    121c:	26 81       	ldd	r18, Z+6	; 0x06
    121e:	37 81       	ldd	r19, Z+7	; 0x07
    1220:	21 50       	subi	r18, 0x01	; 1
    1222:	31 09       	sbc	r19, r1
    1224:	37 83       	std	Z+7, r19	; 0x07
    1226:	26 83       	std	Z+6, r18	; 0x06
    1228:	99 27       	eor	r25, r25
    122a:	08 95       	ret
    122c:	8f ef       	ldi	r24, 0xFF	; 255
    122e:	9f ef       	ldi	r25, 0xFF	; 255
    1230:	08 95       	ret

00001232 <__ctype_isfalse>:
    1232:	99 27       	eor	r25, r25
    1234:	88 27       	eor	r24, r24

00001236 <__ctype_istrue>:
    1236:	08 95       	ret

00001238 <__prologue_saves__>:
    1238:	2f 92       	push	r2
    123a:	3f 92       	push	r3
    123c:	4f 92       	push	r4
    123e:	5f 92       	push	r5
    1240:	6f 92       	push	r6
    1242:	7f 92       	push	r7
    1244:	8f 92       	push	r8
    1246:	9f 92       	push	r9
    1248:	af 92       	push	r10
    124a:	bf 92       	push	r11
    124c:	cf 92       	push	r12
    124e:	df 92       	push	r13
    1250:	ef 92       	push	r14
    1252:	ff 92       	push	r15
    1254:	0f 93       	push	r16
    1256:	1f 93       	push	r17
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	ca 1b       	sub	r28, r26
    1262:	db 0b       	sbc	r29, r27
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	09 94       	ijmp

00001270 <__epilogue_restores__>:
    1270:	2a 88       	ldd	r2, Y+18	; 0x12
    1272:	39 88       	ldd	r3, Y+17	; 0x11
    1274:	48 88       	ldd	r4, Y+16	; 0x10
    1276:	5f 84       	ldd	r5, Y+15	; 0x0f
    1278:	6e 84       	ldd	r6, Y+14	; 0x0e
    127a:	7d 84       	ldd	r7, Y+13	; 0x0d
    127c:	8c 84       	ldd	r8, Y+12	; 0x0c
    127e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1280:	aa 84       	ldd	r10, Y+10	; 0x0a
    1282:	b9 84       	ldd	r11, Y+9	; 0x09
    1284:	c8 84       	ldd	r12, Y+8	; 0x08
    1286:	df 80       	ldd	r13, Y+7	; 0x07
    1288:	ee 80       	ldd	r14, Y+6	; 0x06
    128a:	fd 80       	ldd	r15, Y+5	; 0x05
    128c:	0c 81       	ldd	r16, Y+4	; 0x04
    128e:	1b 81       	ldd	r17, Y+3	; 0x03
    1290:	aa 81       	ldd	r26, Y+2	; 0x02
    1292:	b9 81       	ldd	r27, Y+1	; 0x01
    1294:	ce 0f       	add	r28, r30
    1296:	d1 1d       	adc	r29, r1
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	f8 94       	cli
    129c:	de bf       	out	0x3e, r29	; 62
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	cd bf       	out	0x3d, r28	; 61
    12a2:	ed 01       	movw	r28, r26
    12a4:	08 95       	ret

000012a6 <_exit>:
    12a6:	f8 94       	cli

000012a8 <__stop_program>:
    12a8:	ff cf       	rjmp	.-2      	; 0x12a8 <__stop_program>
